import "util.proto";
import "objectContents.proto";
import "delta.proto";

option java_package = "ralph_protobuffs";
option java_outer_classname = "PartnerRequestSequenceBlockProto";


message PartnerRequestSequenceBlock
{
    message Arguments
    {
        /**
           All object components necessary to rebuild object.
         */
        repeated ObjectContents context_contents = 1;
        /**
           Allow to hold internal fields of container.
         */
        repeated ArgumentContainerDeltas container_deltas = 2;
        
        /**
           Ordered: first argument to rpc is first of argument_uuids,
           etc.
         */
        repeated UUID argument_uuids = 3;
    }

    message ArgumentContainerDeltas
    {
        required string object_uuid = 1;
        repeated Delta.ContainerDelta container_delta = 2;
    }

    
    
    required UUID event_uuid = 1;
    required Priority priority = 2;
    
    /*
      {String or empty} block_name --- The name of the
      sequence block we want to execute on the partner
      endpoint. (Note: this is how that sequence block is named in
      the source Waldo file, not how it is translated by the
      compiler into a function.)  It can also be empty if this is the
      final message sequence block's execution.
    */
    optional string name_of_block_requesting = 3;

    /*
      When the partner endpoint                       
      responds, it should place reply_with_uuid in its reply_to
      message field.  That way, we can determine which message the
      partner endpoint was replying to.
    */
    required UUID reply_with_uuid = 4;

    /*
      @param {uuid or empty} reply_to_uuid --- If this is the
      beginning of a sequence of messages, then leave the
      reply_to_uuid field empty (the message is not a reply to
      anything that we have seen so far).  Otherwise, put the
      reply_with message field of the last message that the partner
      said as part of this sequence in.
    */      
    optional UUID reply_to_uuid = 5;

    /**
       Optional because may not have any arguments to rpc.
     */
    optional Arguments arguments = 6;

    /**
       True if the call should have transactional semantics.  False
       otherwise.
     */
    required bool transaction = 7;

    /**
       If this is the result of an rpc call, can contain return
       values.
     */
    optional Arguments return_objs = 8;

    /**
       For an RPC request, designate which endpoint to run rpc on.
     */
    optional UUID target_endpt = 9;
}
