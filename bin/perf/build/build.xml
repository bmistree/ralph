<project name="PerformanceTests" default="compile" basedir=".">
  
  <description>
    Run some performanceTests
  </description>

  <dirname
    property="perf_test_dir"
    file="${ant.file.PerformanceTests}"
  />

  <!-- global properties for this build file -->
  <property name="build_dir" location="${perf_test_dir}/classes"/>
  <property name="ralph_src_dir" location="${perf_test_dir}/../ralph_src"/>
  <property name="ralph_emitted_dir" location="${perf_test_dir}/../ralph_emitted"/>
  <property name="test_src_dir" location="${perf_test_dir}/../src"/>
  <property
      name="lib_build_path"
      location="${perf_test_dir}/../../../ralph/java_lib/build"/>
  <property
      name="lib_class_path" location="${lib_build_path}/classes/"/>
  <property
      name="proto_class_path" location="${lib_build_path}/../protobuf-java-2.4.1.jar"/>
  <property name="ralph_compiler_py" location="${perf_test_dir}/../../emit_file.py"/>

  <property
      name="perf_package"
      value="performance"/>

  
  <!-- set up build directories for test -->
  <target name="init" description="setup build directories">
    <echo message="Setting up build directories for tests"/>
    <mkdir dir="${build_dir}"/>
    <mkdir dir="${ralph_emitted_dir}"/>
  </target>


  <!-- COMPILING -->
  <!-- compile java libraries -->
  <target name="compile_libs" depends="init" description="compile library files">
    <ant antfile="${lib_build_path}/build.xml" target="compile_all" />  
  </target>

  <!-- compile utils (needed by all tests) -->
  <target name="compile_utils">
      <javac
            srcdir="${test_src_dir}/"
            destdir="${build_dir}"
            classpath="${lib_class_path}:${build_dir}:${proto_class_path}"
            debug="true"
            debuglevel="lines,vars,source"
            includeantruntime="false">
          <include name="PerfUtil.java" />
        </javac>
  </target>


  <property name="num_ops_to_perform"
            value="10000"/>
  <property name="read_num_ops_per_thread"
            value="30000"/>
  <property name="read_num_threads"
            value="5"/>
  <target name="run_read_test" depends="init,compile_libs,compile_utils">

    <!-- Translate source for read test into java -->
    <echo message="${line.separator}Read test${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src_dir}/read_test.rph"/>
      <arg line="-o ${ralph_emitted_dir}/ReadTest.java"/>
      <arg line="-p ${perf_package}"/>
      <arg line="-c ReadTest"/>
    </exec>

    <!-- Compile java emitted to byte code for test -->
    <javac
        srcdir="${ralph_emitted_dir}/"
        destdir="${build_dir}"
        classpath="${lib_class_path}:${proto_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false">
      <include name="ReadTest.java" />
    </javac>

    <!-- Compile performance test for variable reads -->
    <javac
        srcdir="${test_src_dir}/"
        destdir="${build_dir}"
        classpath="${lib_class_path}:${build_dir}:${proto_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false">
      <include name="ReadTestPerf.java" />
    </javac>

    <!-- Run the read test -->
    <java
        dir="${build_dir}"
        classname="${perf_package}.ReadTestPerf"
        fork="yes"
        classpath="${lib_class_path}:${build_dir}:${proto_class_path}">
        <arg line="${read_num_ops_per_thread}"/>
        <arg line="${read_num_threads}"/>
    </java>
  </target>


  <!-- Write test -->
  <target name="run_write_test" depends="init,compile_libs,compile_utils">

    <!-- Translate source for write test into java -->
    <echo message="${line.separator}Write test${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src_dir}/write_test.rph"/>
      <arg line="-o ${ralph_emitted_dir}/WriteTest.java"/>
      <arg line="-p ${perf_package}"/>
      <arg line="-c WriteTest"/>
    </exec>

    <!-- Compile java emitted to byte code for test -->
    <javac
        srcdir="${ralph_emitted_dir}/"
        destdir="${build_dir}"
        classpath="${lib_class_path}:${proto_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false">
      <include name="WriteTest.java" />
    </javac>

    <!-- Compile performance test for variable writes -->
    <javac
        srcdir="${test_src_dir}/"
        destdir="${build_dir}"
        classpath="${lib_class_path}:${build_dir}:${proto_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false">
      <include name="WriteTestPerf.java" />
    </javac>

    <!-- Run the write test -->
    <java
        dir="${build_dir}"
        classname="${perf_package}.WriteTestPerf"
        fork="yes"
        classpath="${lib_class_path}:${build_dir}:${proto_class_path}">
        <arg line="${num_ops_to_perform}"/>
    </java>
  </target>



  <!-- Nested struct test -->
  <target name="run_nested_struct_test" depends="init,compile_libs,compile_utils">

    <!-- Translate source for nested struct test into java -->
    <echo message="${line.separator}Nested struct test${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src_dir}/nested_structs.rph"/>
      <arg line="-o ${ralph_emitted_dir}/NestedStructs.java"/>
      <arg line="-p ${perf_package}"/>
      <arg line="-c NestedStructs"/>
    </exec>

    <!-- Compile java emitted to byte code for test -->
    <javac
        srcdir="${ralph_emitted_dir}/"
        destdir="${build_dir}"
        classpath="${lib_class_path}:${proto_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false">
      <include name="NestedStructs.java" />
    </javac>

    <!-- Compile performance test for variable writes -->
    <javac
        srcdir="${test_src_dir}/"
        destdir="${build_dir}"
        classpath="${lib_class_path}:${build_dir}:${proto_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false">
      <include name="NestedStructsPerf.java" />
    </javac>

    <!-- Run the write test -->
    <java
        dir="${build_dir}"
        classname="${perf_package}.NestedStructsPerf"
        fork="yes"
        classpath="${lib_class_path}:${build_dir}:${proto_class_path}">
        <arg line="${num_ops_to_perform}"/>
    </java>
  </target>

  <!-- pronghorn test -->
  <target name="run_pronghorn_perf_test" depends="init,compile_libs,compile_utils">

    <!-- Translate source for nested struct test into java -->
    <echo message="${line.separator}Pronghorn test${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src_dir}/pronghorn_instance.rph"/>
      <arg line="-o ${ralph_emitted_dir}/PronghornInstance.java"/>
      <arg line="-p ${perf_package}"/>
      <arg line="-c PronghornInstance"/>
    </exec>

    <!-- Compile java emitted to byte code for test -->
    <javac
        srcdir="${ralph_emitted_dir}/"
        destdir="${build_dir}"
        classpath="${lib_class_path}:${proto_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false">
      <include name="PronghornInstance.java" />
    </javac>

    <!-- Compile performance test for variable writes -->
    <javac
        srcdir="${test_src_dir}/"
        destdir="${build_dir}"
        classpath="${lib_class_path}:${build_dir}:${proto_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false">
      <include name="PronghornTestPerf.java" />
    </javac>

    <!-- Run the write test -->
    <java
        dir="${build_dir}"
        classname="${perf_package}.PronghornTestPerf"
        fork="yes"
        classpath="${lib_class_path}:${build_dir}:${proto_class_path}">
        <arg line="${num_ops_to_perform}"/>
    </java>
  </target>

  
  
  <!-- Delete the build directories -->
  <target name="clean" description="get rid of build dir">
    <delete dir="${build_dir}"/>
    <delete dir="${ralph_emitted_dir}"/>
    <!-- Delete ralph compiler output -->
    <delete file="parser.out"/>
    <delete file="parsetab.py"/>
    
  </target>

  
</project>
