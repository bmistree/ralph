alias Endpoint Tester as 'performance.MultiReadTestJava.Tester';
alias Interface IReadTest as 'performance.IReadTestJava.IReadTest';

Struct SharedTVar
{
    TVar Number atomic_number = 0;
    TVar Number other_atomic_number = 0;
    Number number = 0;    
    
    TVar Map (from: Number, to: Number) atomic_map;
    Map (from: Number, to: Number) map;
}

Endpoint Tester implements Interface IReadTest
{
    Struct SharedTVar shared_tvar;

    give_other_shared() returns Struct SharedTVar
    {
        return shared_tvar;
    }
    
    set_from_other(Endpoint Tester to_set_from)
    {
        shared_tvar = to_set_from.give_other_shared();
    }
    
    // @Override    
    read_atomic_number() returns Number
    {
        Number to_return;
        atomically
        {
            to_return = shared_tvar.atomic_number;
        }
        return to_return;
    }


    // @Override
    read_number() returns Number
    {
        return shared_tvar.number;
    }

    // @Override
    read_other_atomic_number() returns Number
    {
        Number to_return;
        atomically
        {
            to_return = shared_tvar.other_atomic_number;
        }
        return to_return;
    }
    
    // @Override
    read_map()
    {
        shared_tvar.map.contains(3);
    }
    
    // @Override
    read_atomic_map()
    {
        atomically
        {
            shared_tvar.atomic_map.contains(3);
        }
    }
    
}
