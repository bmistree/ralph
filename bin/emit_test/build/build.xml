<project name="RalphEmitTest" default="compile" basedir=".">
  
  <description>
    Test cases for java libraries.
  </description>

  <dirname
    property="emit_test_dir"
    file="${ant.file.RalphJavaLibTest}"
  />

  <!-- global properties for this build file -->
  <property name="build.dir" location="${emit_test_dir}/classes"/>
  <property name="ralph_src.dir" location="${emit_test_dir}/../ralph_src"/>
  <property name="ralph_emitted.dir" location="${emit_test_dir}/../ralph_emitted"/>
  <property name="test_src.dir" location="${emit_test_dir}/../test_src"/>
  <property
      name="lib_build_path"
      location="${emit_test_dir}/../../../ralph/java_lib/build"/>
  <property
      name="lib_class_path" location="${lib_build_path}/classes/"/>
  <property
      name="proto_class_path" location="${lib_build_path}/../protobuf-java-2.4.1.jar"/>
  <property name="ralph_compiler_py" location="${emit_test_dir}/../../emit_file.py"/>

  
  <!-- set up build directories for test -->
  <target name="init" description="setup build directories">
    <echo message="Setting up build directories for tests"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${ralph_emitted.dir}"/>
  </target>


  <!-- COMPILING -->
  <!-- compile java libraries -->
  <target name="compile_libs" depends="init" description="compile library files">
    <ant antfile="${lib_build_path}/build.xml" target="compile_all" />  
  </target>

  <!-- compile ralph endpoints to java programs -->
  <target name="compile_ralph" depends="init,compile_libs" description="compile ralph files">
    <!-- Compile to java -->
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/basic_ralph.rph"/>
      <arg line="${ralph_emitted.dir}/BasicRalph.java"/>
      <arg line="emit_test_package"/>
      <arg line="BasicRalph"/>
    </exec>
    
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/internal_method_call.rph"/>
      <arg line="${ralph_emitted.dir}/InternalMethodCall.java"/>
      <arg line="emit_test_package"/>
      <arg line="InternalMethodCall"/>
    </exec>

    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/ralph_atomically.rph"/>
      <arg line="${ralph_emitted.dir}/RalphAtomically.java"/>
      <arg line="emit_test_package"/>
      <arg line="RalphAtomically"/>
    </exec>

    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/basic_partner.rph"/>
      <arg line="${ralph_emitted.dir}/BasicPartner.java"/>
      <arg line="emit_test_package"/>
      <arg line="BasicPartner"/>
    </exec>


    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/test_map.rph"/>
      <arg line="${ralph_emitted.dir}/MapTest.java"/>
      <arg line="emit_test_package"/>
      <arg line="MapTest"/>
    </exec>

    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/atomic_map.rph"/>
      <arg line="${ralph_emitted.dir}/AtomicMapTest.java"/>
      <arg line="emit_test_package"/>
      <arg line="AtomicMapTest"/>
    </exec>

    
    <!-- Compile all ralph java to bytecode -->
    <javac
        srcdir="${ralph_emitted.dir}"
        destdir="${build.dir}"
        classpath="${lib_class_path}"
        includeantruntime="false" />
    
  </target>

  <target name="compile_ralph_tests" depends="init,compile_ralph" description="compile basic ralph">
    <!-- compile all ralph tests  -->
    <javac
        srcdir="${test_src.dir}"
        destdir="${build.dir}"
        classpath="${build.dir}"
        includeantruntime="false" />
  </target>

  <!-- RUNNING TESTS -->
  <target
      name="run_all"
      depends=
        "run_BasicSetterGetter, run_BasicInternalMethodCall,
         run_BasicTestAtomically,run_BasicPartnerCall,run_MapTest,
         run_AtomicMapTest">
  </target>

  
  <!-- Single side setter getter -->
  <target
      name="run_BasicSetterGetter"
      depends="compile_ralph_tests"
      description="Single side setter getter test.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.BasicSetterGetter" fork="yes">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- Internal method call on single host -->
  <target
      name="run_BasicInternalMethodCall"
      depends="compile_ralph_tests"
      description="Single side internal method call.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.BasicInternalMethodCall" fork="yes">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- Atomically change -->
  <target
      name="run_BasicTestAtomically"
      depends="compile_ralph_tests"
      description="Test nested atomically-s.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.BasicTestAtomically" fork="yes">
        <arg line="${args}"/>
    </java>
  </target>
  

  <!-- Partner call -->
  <target
      name="run_BasicPartnerCall"
      depends="compile_ralph_tests"
      description="Test calling partner methods.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.BasicPartnerCall"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>
  

  <!-- MapTesting -->
  <target
      name="run_MapTest"
      depends="compile_ralph_tests"
      description="Test map methods.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.MapTester"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>
  
  <!-- Atomic map test -->
  <target
      name="run_AtomicMapTest"
      depends="compile_ralph_tests"
      description="Test atomic map methods.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.AtomicMapTester"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>


  
  
  <!-- Delete the build directories -->
  <target name="clean" description="get rid of build dir">
    <delete dir="${build.dir}"/>
    <delete dir="${ralph_emitted.dir}"/>
  </target>

  <target
      name="clean_all"
      depends="clean"
      description="get rid of build dir and all built libs">
    
    <ant antfile="${lib_build_path}/build.xml" target="clean" />
    
  </target>

  
</project>
