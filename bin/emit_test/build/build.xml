<project name="RalphEmitTest" default="compile" basedir=".">

  <description>
    Test cases for java libraries.
  </description>

  <dirname
    property="emit_test_dir"
    file="${ant.file.RalphJavaLibTest}"
  />

  <!-- global properties for this build file -->
  <property name="build.dir" location="${emit_test_dir}/classes"/>
  <property name="config_dir" location="${emit_test_dir}/config"/>

  <property name="jar_dir" location="${emit_test_dir}/jar_dir"/>

  <property name="ralph_src.dir" location="${emit_test_dir}/../ralph_src"/>
  <property name="ralph_emitted.dir" location="${emit_test_dir}/../ralph_emitted"/>
  <property name="test_src.dir" location="${emit_test_dir}/../emit_test_harnesses"/>
  <property
      name="lib_build_path"
      location="${emit_test_dir}/../../../ralph/java_lib/build"/>

  <property
      name="no_log_config"
      location="${lib_build_path}/no_log_config/config.properties"/>
  <property
      name="in_memory_log_config"
      location="${lib_build_path}/in_memory_log_config/config.properties"/>
  <property
      name="disk_log_config"
      location="${lib_build_path}/disk_log_config/config.properties"/>
  <property
      name="multidisk_log_config"
      location="${lib_build_path}/multidisk_durability_config/config.properties"/>

  <property
      name="disk_durability_config"
      location="${lib_build_path}/disk_durability_config/config.properties"/>

  <property
      name="lib_class_path" location="${lib_build_path}/classes/"/>
  <property
      name="proto_class_path" location="${lib_build_path}/../protobuf-java-2.5.0.jar"/>
  <property
      name="proto_jar_dir" location="${lib_build_path}/../"/>
  <property name="ralph_compiler_py" location="${emit_test_dir}/../../emit_file.py"/>

  <property name="emitted_package" value="ralph_emitted"/>
  <property name="harness_package" value="emit_test_harnesses"/>


  <!-- set up build directories for test -->
  <target name="init" description="setup build directories">
    <echo message="Setting up build directories for tests"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${ralph_emitted.dir}"/>
    <mkdir dir="${jar_dir}"/>
  </target>


  <!-- Compile an individual rph file -->
  <target
      name="compile_ralph"
      description="Compile ralph">
    <echo message="${line.separator}${rph_filename}${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/${rph_filename}"/>
      <arg line="-o ${ralph_emitted.dir}/${class_name}.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c ${class_name}"/>
    </exec>
  </target>

  <!-- Compilation for each ralph file -->
  <target name="enum_ralph" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="enum.rph"/>
      <param name="class_name" value="EnumJava"/>
    </antcall>
  </target>

  <target name="basic_same_host_partner" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="basic_same_host_partner.rph"/>
      <param name="class_name" value="BasicSameHostPartnerJava"/>
    </antcall>
  </target>

  <target name="durability_many_services" depends="init"
          description="Durability replay over many services">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="durability_many_services.rph"/>
      <param name="class_name" value="DurabilityManyServicesJava"/>
    </antcall>
  </target>

  <target name="replay_enum" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="replay_enum.rph"/>
      <param name="class_name" value="ReplayEnumJava"/>
    </antcall>
  </target>

  <target name="mixed_accesses" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="mixed_accesses.rph"/>
      <param name="class_name" value="MixedAccessesJava"/>
    </antcall>
  </target>

  <target name="direct_struct_wrapped_endpoint" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="direct_struct_wrapped_endpoint.rph"/>
      <param name="class_name" value="DirectStructWrappedEndpointJava"/>
    </antcall>
  </target>

  <target name="atomic_number_incrementer" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="atomic_number_incrementer.rph"/>
      <param name="class_name" value="AtomicNumberIncrementerJava"/>
    </antcall>
  </target>

  <target name="struct_enum_ralph" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="enum_struct.rph"/>
      <param name="class_name" value="EnumStructJava"/>
    </antcall>
  </target>

  <target name="durability_replay_rpc" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="durability_replay_rpc.rph"/>
      <param name="class_name" value="DurabilityReplayRPCJava"/>
    </antcall>
  </target>

  <target name="recursive_partner_addition_ralph" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="recursive_partner_addition.rph"/>
      <param name="class_name" value="RecursivePartnerAdditionJava"/>
    </antcall>
  </target>

  <target name="alias_enum_ralph" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="alias_enum.rph"/>
      <param name="class_name" value="AliasEnumJava"/>
    </antcall>
  </target>

  <target name="conn_uuid_ralph" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="conn_uuid.rph"/>
      <param name="class_name" value="ConnUuidJava"/>
    </antcall>
  </target>

  <target name="replay_partner_struct_element_ralph"
          depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="replay_partner_struct_element.rph"/>
      <param name="class_name" value="ReplayPartnerStructElementJava"/>
    </antcall>
  </target>

  <target name="loc_uuid_ralph"
          depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="loc_uuid.rph"/>
      <param name="class_name" value="LocUuidJava"/>
    </antcall>
  </target>

  <target name="iface_basic_ralph" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="iface_basic_ralph.rph"/>
      <param name="class_name" value="IFaceBasicRalphJava"/>
    </antcall>
  </target>

  <target name="versioned_iface" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="versioned_iface.rph"/>
      <param name="class_name" value="VersionedIFaceJava"/>
    </antcall>
  </target>

  <target name="replay_partner_number_change" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="replay_partner_number_change.rph"/>
      <param name="class_name" value="ReplayPartnerNumberChangeJava"/>
    </antcall>
  </target>

  <target name="read_only_speculate" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="read_only_speculate.rph"/>
      <param name="class_name" value="ReadOnlySpeculateJava"/>
    </antcall>
  </target>

  <target name="multiple_interfaces" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="multiple_interfaces.rph"/>
      <param name="class_name" value="MultipleInterfacesJava"/>
    </antcall>
  </target>

  <target name="iserialize_struct_sum" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="iserialize_struct_sum.rph"/>
      <param name="class_name" value="ISerializeStructSumJava"/>
    </antcall>
  </target>

  <target name="serialize_null" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_null.rph"/>
      <param name="class_name" value="SerializeNullJava"/>
    </antcall>
  </target>

  <target name="serialize_struct_with_list" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_struct_with_list.rph"/>
      <param name="class_name" value="SerializeStructWithListJava"/>
    </antcall>
  </target>

  <target name="serialize_struct_with_struct" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_struct_with_struct.rph"/>
      <param name="class_name" value="SerializeStructWithStructJava"/>
    </antcall>
  </target>

  <target name="serialize_struct_with_map" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_struct_with_map.rph"/>
      <param name="class_name" value="SerializeStructWithMapJava"/>
    </antcall>
  </target>

  <target name="serialize_map_of_structs" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_map_of_structs.rph"/>
      <param name="class_name" value="SerializeMapOfStructsJava"/>
    </antcall>
  </target>

  <target name="struct_serialization" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="struct_serialization.rph"/>
      <param name="class_name" value="StructSerializationJava"/>
    </antcall>
  </target>

  <target name="less_simplified_backed_speculation" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="less_simplified_backed_speculation.rph"/>
      <param name="class_name" value="LessSimplifiedBackedSpeculationJava"/>
    </antcall>
  </target>

  <target name="serialize_num_map" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_num_map.rph"/>
      <param name="class_name" value="SerializeNumMapJava"/>
    </antcall>
  </target>

  <target name="struct_list_serialization" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="struct_list_serialization.rph"/>
      <param name="class_name" value="StructListSerializationJava"/>
    </antcall>
  </target>

  <target name="serialize_text_list" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_text_list.rph"/>
      <param name="class_name" value="SerializeTextListJava"/>
    </antcall>
  </target>

  <target name="serialize_true_false_list" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_true_false_list.rph"/>
      <param name="class_name" value="SerializeTrueFalseListJava"/>
    </antcall>
  </target>

  <target name="basic_ralph" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="basic_ralph.rph"/>
      <param name="class_name" value="BasicRalphJava"/>
    </antcall>
  </target>

  <target name="atomic_setter_getter" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="atomic_setter_getter.rph"/>
      <param name="class_name" value="AtomicSetterGetterJava"/>
    </antcall>
  </target>

  <target name="internal_method_call" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="internal_method_call.rph"/>
      <param name="class_name" value="InternalMethodCallJava"/>
    </antcall>
  </target>

  <target name="ralph_atomically" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="ralph_atomically.rph"/>
      <param name="class_name" value="RalphAtomicallyJava"/>
    </antcall>
  </target>

  <target name="nested_atomic_setter_getter" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="nested_atomic_setter_getter.rph"/>
      <param name="class_name" value="NestedAtomicSetterGetterJava"/>
    </antcall>
  </target>

  <target name="basic_partner" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="basic_partner.rph"/>
      <param name="class_name" value="BasicPartnerJava"/>
    </antcall>
  </target>

  <target name="test_map" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="test_map.rph"/>
      <param name="class_name" value="TestMapJava"/>
    </antcall>
  </target>

  <target name="atomic_map" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="atomic_map.rph"/>
      <param name="class_name" value="AtomicMapJava"/>
    </antcall>
  </target>

  <target name="struct_test" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="struct_test.rph"/>
      <param name="class_name" value="StructTestJava"/>
    </antcall>
  </target>

  <target name="nested_structs" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="nested_structs.rph"/>
      <param name="class_name" value="NestedStructsJava"/>
    </antcall>
  </target>

  <target name="test_list" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="test_list.rph"/>
      <param name="class_name" value="TestListJava"/>
    </antcall>
  </target>

  <target name="atomic_list" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="atomic_list.rph"/>
      <param name="class_name" value="AtomicListJava"/>
    </antcall>
  </target>

  <target name="replay_struct_list" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="replay_struct_list.rph"/>
      <param name="class_name" value="ReplayStructListJava"/>
    </antcall>
  </target>

  <target name="replay_struct_map" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="replay_struct_map.rph"/>
      <param name="class_name" value="ReplayStructMapJava"/>
    </antcall>
  </target>

  <target name="for_list" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="for_list.rph"/>
      <param name="class_name" value="ForListJava"/>
    </antcall>
  </target>

  <target name="for_map" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="for_map.rph"/>
      <param name="class_name" value="ForMapJava"/>
    </antcall>
  </target>

  <target name="struct_lib" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="struct_lib.rph"/>
      <param name="class_name" value="StructLibJava"/>
    </antcall>
  </target>

  <target name="struct_lib_user" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="struct_lib_user.rph"/>
      <param name="class_name" value="StructLibUserJava"/>
    </antcall>
  </target>

  <target name="delay_and_contend" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="delay_and_contend.rph"/>
      <param name="class_name" value="DelayAndContendJava"/>
    </antcall>
  </target>

  <target name="interrupted_atomically" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="interrupted_atomically.rph"/>
      <param name="class_name" value="InterruptedAtomicallyJava"/>
    </antcall>
  </target>

  <target name="endpoint_lib_user" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="endpoint_lib_user.rph"/>
      <param name="class_name" value="EndpointLibUserJava"/>
    </antcall>
  </target>

  <target name="interrupted_endpoint_atomically" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="interrupted_endpoint_atomically.rph"/>
      <param name="class_name" value="InterruptedEndpointAtomicallyJava"/>
    </antcall>
  </target>

  <target name="promotion" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="promotion.rph"/>
      <param name="class_name" value="PromotionJava"/>
    </antcall>
  </target>

  <target name="super_interrupted_atomically" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="super_interrupted_atomically.rph"/>
      <param name="class_name" value="SuperInterruptedAtomicallyJava"/>
    </antcall>
  </target>

  <target name="hardware_failure" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="hardware_failure.rph"/>
      <param name="class_name" value="HardwareFailureJava"/>
    </antcall>
  </target>

  <target name="return_list" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="return_list.rph"/>
      <param name="class_name" value="ReturnListJava"/>
    </antcall>
  </target>

  <target name="atomic_partner" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="atomic_partner.rph"/>
      <param name="class_name" value="AtomicPartnerJava"/>
    </antcall>
  </target>

  <target name="many_ops_atomic_list_fail" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="many_ops_atomic_list_fail.rph"/>
      <param name="class_name" value="ManyOpsAtomicListFailJava"/>
    </antcall>
  </target>

  <target name="atomic_list_append" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="atomic_list_append.rph"/>
      <param name="class_name" value="AtomicListAppendJava"/>
    </antcall>
  </target>

  <target name="endpoint_struct_list" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="endpoint_struct_list.rph"/>
      <param name="class_name" value="EndpointStructListJava"/>
    </antcall>
  </target>

  <target name="wrapped_remote" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="wrapped_remote.rph"/>
      <param name="class_name" value="WrappedRemoteJava"/>
    </antcall>
  </target>

  <target name="linked_instance" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="linked_instance.rph"/>
      <param name="class_name" value="LinkedInstanceJava"/>
    </antcall>
  </target>

  <target name="single_side_service_factory" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="single_side_service_factory.rph"/>
      <param name="class_name" value="SingleSideServiceFactoryJava"/>
    </antcall>
  </target>

  <target name="partner_service_factory" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="partner_service_factory.rph"/>
      <param name="class_name" value="PartnerServiceFactoryJava"/>
    </antcall>
  </target>

  <target name="basic_speculation" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="basic_speculation.rph"/>
      <param name="class_name" value="BasicSpeculationJava"/>
    </antcall>
  </target>

  <target name="null" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="null.rph"/>
      <param name="class_name" value="NullJava"/>
    </antcall>
  </target>

  <target name="internal_create_service" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="internal_create_service.rph"/>
      <param name="class_name" value="InternalCreateServiceJava"/>
    </antcall>
  </target>

  <target name="self" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="self.rph"/>
      <param name="class_name" value="SelfJava"/>
    </antcall>
  </target>

  <target name="wrapped_iface" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="wrapped_iface.rph"/>
      <param name="class_name" value="WrappedIFaceJava"/>
    </antcall>
  </target>

  <target name="container_speculation" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="container_speculation.rph"/>
      <param name="class_name" value="ContainerSpeculationJava"/>
    </antcall>
  </target>

  <target name="range_test" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="range_test.rph"/>
      <param name="class_name" value="RangeTestJava"/>
    </antcall>
  </target>

  <target name="read_read_write_speculation" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="read_read_write_speculation.rph"/>
      <param name="class_name" value="ReadReadWriteSpeculationJava"/>
    </antcall>
  </target>

  <target name="interrupted_speculater" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="interrupted_speculater.rph"/>
      <param name="class_name" value="InterruptedSpeculaterJava"/>
    </antcall>
  </target>

  <target name="middle_interrupted_speculater" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="middle_interrupted_speculater.rph"/>
      <param name="class_name" value="MiddleInterruptedSpeculaterJava"/>
    </antcall>
  </target>

  <target name="backed_speculation" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="backed_speculation.rph"/>
      <param name="class_name" value="BackedSpeculationJava"/>
    </antcall>
  </target>

  <target name="atomic_struct" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="atomic_struct.rph"/>
      <param name="class_name" value="AtomicStructJava"/>
    </antcall>
  </target>

  <target name="text_add_and_to_text" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="text_add_and_to_text.rph"/>
      <param name="class_name" value="TextAddAndToTextJava"/>
    </antcall>
  </target>

  <target name="lots_of_backouts" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="lots_of_backouts.rph"/>
      <param name="class_name" value="LotsOfBackoutsJava"/>
    </antcall>
  </target>

  <target name="multiline_string" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="multiline_string.rph"/>
      <param name="class_name" value="MultiLineStringJava"/>
    </antcall>
  </target>

  <target name="simplified_backed_speculation" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="simplified_backed_speculation.rph"/>
      <param name="class_name" value="SimplifiedBackedSpeculationJava"/>
    </antcall>
  </target>

  <target name="serialize_number_list" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_number_list.rph"/>
      <param name="class_name" value="SerializeNumberListJava"/>
    </antcall>
  </target>

  <target name="remote_installer" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="remote_installer.rph"/>
      <param name="class_name" value="RemoteInstallerJava"/>
    </antcall>
  </target>
  
  <target name="partner_number_return" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="partner_number_return.rph"/>
      <param name="class_name" value="PartnerNumberReturnJava"/>
    </antcall>
  </target>

  <target name="internal_return_struct" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="internal_return_struct.rph"/>
      <param name="class_name" value="InternalReturnStructJava"/>
    </antcall>
  </target>

  <target name="reference_service_factory" depends="init"
          description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="reference_service_factory.rph"/>
      <param name="class_name" value="ReferenceServiceFactoryJava"/>
    </antcall>
  </target>

  <!-- COMPILING -->
  <!-- compile java libraries -->
  <target name="compile_libs" depends="init" description="compile library files">
    <ant antfile="${lib_build_path}/build.xml" target="compile_all" />
  </target>


  <target name="ralph_to_byte_code" depends="init,compile_libs" description="compile ralph files">
    <!-- Compile all ralph java to bytecode -->
    <javac
        srcdir="${ralph_emitted.dir}"
        destdir="${build.dir}"
        classpath="${lib_class_path}:${proto_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false" />
  </target>


  <!-- RUNNING TESTS -->
  <target
      name="jarify_all"
      depends= "ralph_to_byte_code,
        jar_BasicSetterGetter, jar_BasicInternalMethodCall,
        jar_BasicTestAtomically, jar_Map,
        jar_AtomicMap,jar_StructSetterGetter,jar_NestedStructs,
        jar_List,jar_AtomicList,jar_ForList,jar_ForMap,
        jar_StructLibraries,jar_InterruptedAtomically,jar_EndpointCalls,
        jar_InterruptedEndpointCallAtomically,jar_Promotion,
        jar_SuperInterruptedAtomically,jar_HardwareFailure,jar_ReturnList,
        jar_WoundWait,jar_TCPPartnerCall,jar_AtomicPartnerCall,
        jar_RandomFailureExtendedList,
        jar_WrappedSameHostRemoteCall,
        jar_Linked,jar_SingleSideServiceFactory,
        jar_PartnerServiceFactory,jar_EndpointStructList,jar_BasicSpeculation,
        jar_Null,jar_InternalCreateService,jar_Self,jar_ContainerSpeculation,
        jar_Range,jar_ReadReadWriteSpeculation,jar_InterruptedSpeculater,
        jar_MiddleInterruptedSpeculater,jar_AlwaysWorksBackedSpeculation,
        jar_RandomDelaysAlwaysWorksBackedSpeculation,
        jar_RandomFailuresBackedSpeculation, jar_AtomicStruct,
        jar_TextManipulation,jar_LotsOfBackouts,
        jar_TimedAlwaysWorksBackedSpeculation,
        jar_SimplifiedTimedSpeculation, jar_PartnerCallReturn,
        jar_SerializeNumberList,jar_SerializeTextList,
        jar_SerializeTrueFalseList,jar_SerializeStruct,
        jar_ListOfStructsSerialization,jar_LessSimplifiedTimedBackedSpeculation,
        jar_SerializeNumberNumberMap,jar_SerializeMapOfStructs,
        jar_InternalStructMethodCall,jar_ReferenceServiceFactory,
        jar_MultipleInterfaces,jar_SerializeStructWithMap,
        jar_SerializeStructWithStruct,jar_SerializeStructWithList,
        jar_SerializeNullStruct,jar_ReadOnlySpeculate,jar_Enum,
        jar_AliasEnum,jar_StructEnum, jar_ManyListOps,
        jar_VersionedSetterGetter,jar_VersionedMap,jar_VersionedList,
        jar_VersionedStructList,jar_VersionedStructMap,
        jar_DiskVersionedStructList,jar_DiskVersionedStructMap,
        jar_VersionedEnum,jar_VersionedIFace,jar_ReplayPartnerNumberChange,
        jar_ReplayPartnerStructElement,jar_DiskDurabilitySetterGetter,
        jar_DirectStructWrappedEndpoint,jar_DiskDurabilityConstructorCheck,
        jar_DurabilitySingleSideReplayer,jar_RecursivePartnerAddition,
        jar_NestedAtomicSetterGetter,jar_DurabilityManyServicesReplayer,
        jar_DurabilityReplayRPC, jar_MultidiskDurabilitySingleSideReplayer,
        jar_MixedAccesses, jar_DelayAndContend, jar_LocUuid, jar_ConnUuid,
        jar_BasicSameHostPartner">
  </target>

  <!-- Instructions for building ralph for each test   -->
  <!-- Single side setter getter -->
  <target
      name="ralph_BasicSetterGetter"
      depends="iface_basic_ralph,basic_ralph">
  </target>

  <target
      name="ralph_LocUuid"
      depends="loc_uuid_ralph">
  </target>

  <target
      name="ralph_DirectStructWrappedEndpoint"
      depends="direct_struct_wrapped_endpoint">
  </target>

  <target
      name="ralph_RecursivePartnerAddition"
      depends="recursive_partner_addition_ralph">
  </target>

  <target
      name="ralph_VersionedSetterGetter"
      depends="iface_basic_ralph,basic_ralph">
  </target>

  <target
      name="ralph_NestedAtomicSetterGetter"
      depends="iface_basic_ralph,basic_ralph,nested_atomic_setter_getter,
               atomic_setter_getter">
  </target>

  <target
      name="ralph_DurabilitySetterGetter"
      depends="iface_basic_ralph,atomic_setter_getter">
  </target>

  <target
      name="ralph_DurabilityConstructorCheck"
      depends="range_test,atomic_setter_getter,iface_basic_ralph">
  </target>

  <target
      name="ralph_DurabilitySingleSideReplayer"
      depends="atomic_setter_getter,iface_basic_ralph">
  </target>

  <target
      name="ralph_VersionedIFace"
      depends="iface_basic_ralph,basic_ralph,versioned_iface">
  </target>

  <target
      name="ralph_MixedAccesses"
      depends="mixed_accesses">
  </target>

  <target
      name="ralph_ReplayPartnerNumberChange"
      depends="replay_partner_number_change">
  </target>

  <target
      name="ralph_VersionedEnum"
      depends="replay_enum">
  </target>

  <target
      name="ralph_DurabilityManyServicesReplayer"
      depends="durability_many_services,iface_basic_ralph,atomic_setter_getter">
  </target>

  <target
      name="ralph_VersionedMap"
      depends="atomic_map">
  </target>

  <target
      name="ralph_VersionedList"
      depends="atomic_list">
  </target>

  <target
      name="ralph_VersionedStructList"
      depends="replay_struct_list">
  </target>

  <target
      name="ralph_VersionedStructMap"
      depends="replay_struct_map">
  </target>

  <target
      name="ralph_ReadOnlySpeculate"
      depends="read_only_speculate">
  </target>

  <target
      name="ralph_Enum"
      depends="enum_ralph">
  </target>

  <target
      name="ralph_AtomicNumberIncrementer"
      depends="atomic_number_incrementer">
  </target>

  <target
      name="ralph_AliasEnum"
      depends="enum_ralph,alias_enum_ralph">
  </target>

  <target
      name="ralph_BasicSameHostPartner"
      depends="basic_same_host_partner, basic_partner">
  </target>

  <target
      name="ralph_ConnUuid"
      depends="conn_uuid_ralph">
  </target>

  <target
      name="ralph_ReplayPartnerStructElement"
      depends="replay_partner_struct_element_ralph">
  </target>

  <target
      name="ralph_StructEnum"
      depends="struct_enum_ralph">
  </target>

  <target
      name="ralph_DurabilityReplayRPC"
      depends="durability_replay_rpc">
  </target>

  <target
      name="ralph_StructSetterGetter"
      depends="iface_basic_ralph,struct_test">
  </target>

  <target
      name="ralph_BasicInternalMethodCall"
      depends="internal_method_call">
  </target>

  <target
      name="ralph_BasicTestAtomically"
      depends="ralph_atomically">
  </target>

  <target
      name="ralph_TCPPartnerCall"
      depends="basic_partner, basic_same_host_partner">
  </target>

  <target
      name="ralph_Map"
      depends="test_map">
  </target>

  <target
      name="ralph_AtomicMap"
      depends="atomic_map">
  </target>

  <target
      name="ralph_List"
      depends="test_list">
  </target>

  <target
      name="ralph_AtomicList"
      depends="atomic_list">
  </target>

  <target
      name="ralph_NestedStructs"
      depends="nested_structs">
  </target>

  <target
      name="ralph_ForList"
      depends="for_list">
  </target>

  <target
      name="ralph_ForMap"
      depends="for_map">
  </target>

  <target
      name="ralph_StructLibraries"
      depends="struct_lib_user,struct_lib">
  </target>

  <target
      name="ralph_DelayAndContend"
      depends="delay_and_contend">
  </target>

  <target
      name="ralph_InterruptedAtomically"
      depends="interrupted_atomically">
  </target>

  <target
      name="ralph_EndpointCalls"
      depends="basic_ralph,endpoint_lib_user">
  </target>

  <target
      name="ralph_InterruptedEndpointCallAtomically"
      depends="basic_ralph,interrupted_endpoint_atomically">
  </target>

  <target
      name="ralph_Promotion"
      depends="promotion">
  </target>

  <target
      name="ralph_SuperInterruptedAtomically"
      depends="super_interrupted_atomically">
  </target>

  <target
      name="ralph_HardwareFailure"
      depends="hardware_failure">
  </target>

  <target
      name="ralph_ReturnList"
      depends="return_list">
  </target>

  <target
      name="ralph_WoundWait"
      depends="promotion">
  </target>

  <target
      name="ralph_AtomicPartnerCall"
      depends="atomic_partner">
  </target>

  <target
      name="ralph_AtomicTCPPartnerCall"
      depends="atomic_partner">
  </target>

  <target
      name="ralph_RandomFailureExtendedList"
      depends="many_ops_atomic_list_fail">
  </target>

  <target
      name="ralph_AtomicListAppend"
      depends="atomic_list_append">
  </target>

  <target
      name="ralph_WrappedSameHostRemoteCall"
      depends="basic_partner,wrapped_remote">
  </target>

  <target
      name="ralph_Linked"
      depends="linked_instance">
  </target>

  <target
      name="ralph_SingleSideServiceFactory"
      depends="basic_ralph,single_side_service_factory">
  </target>

  <target
      name="ralph_PartnerServiceFactory"
      depends="basic_ralph,single_side_service_factory,
               partner_service_factory,iface_basic_ralph">
  </target>

  <target
      name="ralph_EndpointStructList"
      depends="basic_ralph,endpoint_struct_list">
  </target>

  <target
      name="ralph_BasicSpeculation"
      depends="basic_speculation">
  </target>

  <target
      name="ralph_Null"
      depends="null">
  </target>

  <target
      name="ralph_InternalCreateService"
      depends="internal_create_service">
  </target>

  <target
      name="ralph_Self"
      depends="self">
  </target>

  <target
      name="ralph_ContainerSpeculation"
      depends="basic_speculation,container_speculation">
  </target>

  <target
      name="ralph_Range"
      depends="range_test">
  </target>

  <target
      name="ralph_ReadReadWriteSpeculation"
      depends="read_read_write_speculation">
  </target>

  <target
      name="ralph_InterruptedSpeculaterTest"
      depends="interrupted_speculater">
  </target>

  <target
      name="ralph_MiddleInterruptedSpeculaterTest"
      depends="middle_interrupted_speculater">
  </target>

  <target
      name="ralph_AlwaysWorksBackedSpeculationTest"
      depends="backed_speculation">
  </target>

  <target
      name="ralph_RandomDelaysAlwaysWorksBackedSpeculationTest"
      depends="backed_speculation">
  </target>

  <target
      name="ralph_RandomFailuresBackedSpeculationTest"
      depends="backed_speculation">
  </target>

  <target
      name="ralph_AtomicStruct"
      depends="atomic_struct">
  </target>

  <target
      name="ralph_TextManipulation"
      depends="text_add_and_to_text">
  </target>

  <target
      name="ralph_LotsOfBackouts"
      depends="lots_of_backouts">
  </target>

  <target
      name="ralph_TimedAlwaysWorksBackedSpeculationTest"
      depends="backed_speculation">
  </target>

  <target
      name="ralph_SimplifiedTimedSpeculationTest"
      depends="simplified_backed_speculation">
  </target>

  <target
      name="ralph_PartnerCallReturn"
      depends="partner_number_return">
  </target>

  <target
     name="ralph_RemoteInstaller"
     depends="remote_installer">
  </target>

  <target
      name="ralph_SerializeNumberList"
      depends="serialize_number_list, ralph_RemoteInstaller">
  </target>

  <target
      name="ralph_SerializeTextList"
      depends="serialize_text_list, ralph_RemoteInstaller">
  </target>

  <target
      name="ralph_SerializeTrueFalseList"
      depends="serialize_true_false_list">
  </target>

  <target
      name="ralph_SerializeStructTest"
      depends="struct_serialization">
  </target>

  <target
      name="ralph_ListOfStructsSerialization"
      depends="struct_list_serialization,struct_serialization">
  </target>

  <target
      name="ralph_LessSimplifiedTimedBackedSpeculation"
      depends="less_simplified_backed_speculation">
  </target>

  <target
      name="ralph_SerializeNumberNumberMap"
      depends="serialize_num_map">
  </target>

  <target
      name="ralph_SerializeMapOfStructs"
      depends="serialize_map_of_structs">
  </target>

  <target
      name="ralph_InternalStructMethodCall"
      depends="internal_return_struct">
  </target>

  <target
      name="ralph_ReferenceServiceFactory"
      depends="reference_service_factory">
  </target>

  <target
      name="ralph_MultipleInterfaces"
      depends="multiple_interfaces">
  </target>

  <target
      name="ralph_SerializeStructWithMap"
      depends="serialize_struct_with_map,iserialize_struct_sum">
  </target>

  <target
      name="ralph_SerializeNullStruct"
      depends="serialize_null,iserialize_struct_sum">
  </target>

  <target
      name="ralph_SerializeStructWithList"
      depends="serialize_struct_with_list,iserialize_struct_sum">
  </target>

  <target
      name="ralph_SerializeStructWithStruct"
      depends="serialize_struct_with_struct,iserialize_struct_sum">
  </target>


  <!-- Compiling tests themselves -->
  <target name="compile_harness" depends="ralph_to_byte_code">
    <javac
        srcdir="${test_src.dir}"
        includes="${arg_harness_file_list}"
        destdir="${build.dir}"
        classpath="${lib_class_path}:${proto_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false" />
  </target>

  <target name="harness_Enum">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="EnumTest.java"/>
    </antcall>
  </target>

  <target name="harness_DurabilitySingleSideReplayer">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list"
             value="DurabilitySingleSideReplayer.java"/>
    </antcall>
  </target>

  <target name="harness_VersionedMap">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="VersionedMap.java"/>
    </antcall>
  </target>

  <target name="harness_VersionedList">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="VersionedList.java"/>
    </antcall>
  </target>

  <target name="harness_VersionedStructList">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="VersionedStructList.java"/>
    </antcall>
  </target>

  <target name="harness_VersionedStructMap">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="VersionedStructMap.java"/>
    </antcall>
  </target>

  <target name="harness_AliasEnum">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list"
             value="EnumTest.java,AliasEnumTest.java"/>
    </antcall>
  </target>

  <target name="harness_BasicSameHostPartner">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list"
             value="BasicSameHostPartnerTest.java"/>
    </antcall>
  </target>

  <target name="harness_ConnUuid">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list"
             value="ConnUuidTest.java"/>
    </antcall>
  </target>

  <target name="harness_StructEnum">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list"
             value="StructEnumTest.java"/>
    </antcall>
  </target>

  <target name="harness_DurabilityReplayRPC">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list"
             value="DurabilityReplayRPC.java"/>
    </antcall>
  </target>

  <target name="harness_BasicSetterGetter">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="BasicSetterGetter.java"/>
    </antcall>
  </target>

  <target name="harness_LocUuid">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="LocUuidTest.java"/>
    </antcall>
  </target>

  <target name="harness_NestedAtomicSetterGetter">
    <antcall target="compile_harness">
      <param
          name="arg_harness_file_list"
          value="BasicSetterGetter.java,NestedAtomicSetterGetterTest.java"/>
    </antcall>
  </target>

  <target name="harness_DirectStructWrappedEndpoint">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="DirectStructWrappedEndpoint.java"/>
    </antcall>
  </target>

  <target name="harness_VersionedEnum">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="VersionedEnum.java"/>
    </antcall>
  </target>

  <target name="harness_DurabilityManyServicesReplayer">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list"
             value="DurabilityManyServicesReplayer.java"/>
    </antcall>
  </target>

  <target name="harness_VersionedIFace"
          depends="harness_VersionedSetterGetter">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="VersionedIFace.java"/>
    </antcall>
  </target>

  <target name="harness_MixedAccesses">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="MixedAccessesTester.java"/>
    </antcall>
  </target>

  <target name="harness_RecursivePartnerAddition">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="RecursivePartnerAddition.java"/>
    </antcall>
  </target>

  <target name="harness_ReplayPartnerNumberChange">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="ReplayPartnerNumber.java"/>
    </antcall>
  </target>

  <target name="harness_ReplayPartnerStructElement">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="ReplayPartnerStructElement.java"/>
    </antcall>
  </target>

  <target name="harness_VersionedSetterGetter">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="VersionedSetterGetter.java"/>
    </antcall>
  </target>

  <target name="harness_DurabilitySetterGetter">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="DurabilitySetterGetter.java"/>
    </antcall>
  </target>

  <target name="harness_DurabilityConstructorCheck">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="DurabilityConstructorCheck.java"/>
    </antcall>
  </target>

  <target name="harness_ReadOnlySpeculate">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="ReadOnlySpeculate.java"/>
    </antcall>
  </target>

  <target name="harness_StructSetterGetter">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="StructSetterGetter.java"/>
    </antcall>
  </target>

  <target name="harness_BasicInternalMethodCall">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="BasicInternalMethodCall.java"/>
    </antcall>
  </target>

  <target name="harness_BasicTestAtomically">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="BasicTestAtomically.java"/>
    </antcall>
  </target>

  <target name="harness_TCPPartnerCall">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="TCPPartnerCall.java"/>
    </antcall>
  </target>

  <target name="harness_Map">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="MapTester.java"/>
    </antcall>
  </target>

  <target name="harness_AtomicMap">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="AtomicMapTester.java"/>
    </antcall>
  </target>

  <target name="harness_List">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="ListTester.java"/>
    </antcall>
  </target>

  <target name="harness_AtomicList">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="AtomicListTester.java"/>
    </antcall>
  </target>

  <target name="harness_ManyListOps">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="ManyListOps.java"/>
    </antcall>
  </target>

  <target name="harness_NestedStructs">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="NestedStructs.java"/>
    </antcall>
  </target>

  <target name="harness_ForList">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="ForList.java"/>
    </antcall>
  </target>

  <target name="harness_ForMap">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="ForMap.java"/>
    </antcall>
  </target>

  <target name="harness_StructLibraries">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="StructLibraries.java"/>
    </antcall>
  </target>

  <target name="harness_DelayAndContend">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="DelayAndContendTest.java"/>
    </antcall>
  </target>

  <target name="harness_InterruptedAtomically">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="InterruptedTestAtomically.java"/>
    </antcall>
  </target>

  <target name="harness_EndpointCalls">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="EndpointCalls.java"/>
    </antcall>
  </target>

  <target name="harness_InterruptedEndpointCallAtomically">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="InterruptedEndpointCallAtomically.java"/>
    </antcall>
  </target>

  <target name="harness_Promotion">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="PromotionTest.java"/>
    </antcall>
  </target>

  <target name="harness_SuperInterruptedAtomically">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="SuperInterruptedTestAtomically.java"/>
    </antcall>
  </target>

  <target name="harness_HardwareFailure">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="HardwareFailureTest.java"/>
    </antcall>
  </target>

  <target name="harness_ReturnList">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="ReturnListTest.java"/>
    </antcall>
  </target>

  <target name="harness_WoundWait">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="WoundWaitTest.java"/>
    </antcall>
  </target>

  <target name="harness_AtomicPartnerCall">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="AtomicPartnerCall.java"/>
    </antcall>
  </target>

  <target name="harness_AtomicTCPPartnerCall">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="AtomicTCPPartnerCall.java"/>
    </antcall>
  </target>

  <target name="harness_RandomFailureExtendedList">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="RandomFailureExtendedList.java"/>
    </antcall>
  </target>

  <target name="harness_AtomicListAppend">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="AtomicListAppendTester.java"/>
    </antcall>
  </target>

  <target name="harness_WrappedSameHostRemoteCall">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="WrappedSameHostRemoteCall.java"/>
    </antcall>
  </target>

  <target name="harness_Linked">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="LinkedTests.java"/>
    </antcall>
  </target>

  <target name="harness_SingleSideServiceFactory">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="SingleSideServiceFactoryTest.java"/>
    </antcall>
  </target>

  <target name="harness_PartnerServiceFactory">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="PartnerSendServiceFactoryTest.java"/>
    </antcall>
  </target>

  <target name="harness_EndpointStructList">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="EndpointStructListTest.java"/>
    </antcall>
  </target>

  <target name="harness_BasicSpeculation">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="BasicSpeculationTest.java"/>
    </antcall>
  </target>

  <target name="harness_Null">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="NullTest.java"/>
    </antcall>
  </target>

  <target name="harness_InternalCreateService">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="InternalCreateServiceTest.java"/>
    </antcall>
  </target>

  <target name="harness_Self">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="SelfTest.java"/>
    </antcall>
  </target>

  <target name="harness_ContainerSpeculation">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="ContainerSpeculationTest.java"/>
    </antcall>
  </target>

  <target name="harness_Range">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="Range.java"/>
    </antcall>
  </target>

  <target name="harness_ReadReadWriteSpeculation">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="ReadReadWriteTest.java"/>
    </antcall>
  </target>

  <target name="harness_InterruptedSpeculater">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="InterruptedSpeculaterTest.java"/>
    </antcall>
  </target>

  <target name="harness_MiddleInterruptedSpeculater">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="MiddleInterruptedSpeculaterTest.java"/>
    </antcall>
  </target>

  <target name="harness_AlwaysWorksBackedSpeculation">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list"
             value="AlwaysWorksBackedSpeculationTest.java,BackedSpeculationTestLib.java"/>
    </antcall>
  </target>

  <target
      name="harness_RandomDelaysAlwaysWorksBackedSpeculation"
      depends="harness_AlwaysWorksBackedSpeculation">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="RandomDelaysAlwaysWorksBackedSpeculationTest.java"/>
    </antcall>
  </target>

  <target
      name="harness_RandomFailuresBackedSpeculation"
      depends="harness_AlwaysWorksBackedSpeculation">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="RandomFailuresBackedSpeculationTest.java"/>
    </antcall>
  </target>

  <target name="harness_AtomicStruct">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="AtomicStructTest.java"/>
    </antcall>
  </target>

  <target name="harness_TextManipulation">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="TextManipulation.java"/>
    </antcall>
  </target>

  <target name="harness_LotsOfBackouts">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="LotsOfBackoutsTest.java"/>
    </antcall>
  </target>

  <target name="harness_TimedAlwaysWorksBackedSpeculation">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list"
             value="TimedAlwaysWorksBackedSpeculationTest.java,
                    AlwaysWorksBackedSpeculationTest.java,
                    BackedSpeculationTestLib.java"/>
    </antcall>
  </target>

  <target name="harness_SimplifiedTimedSpeculation">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="SimplifiedTimedSpeculationTest.java"/>
    </antcall>
  </target>

  <target name="harness_PartnerCallReturn">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="PartnerCallReturn.java"/>
    </antcall>
  </target>

  <target name="harness_SerializeNumberList">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="SerializeNumberListTest.java"/>
    </antcall>
  </target>

  <target name="harness_SerializeTextList">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="SerializeTextListTest.java"/>
    </antcall>
  </target>

  <target name="harness_SerializeTrueFalseList">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="SerializeTrueFalseListTest.java"/>
    </antcall>
  </target>

  <target name="harness_SerializeStruct">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="StructSerialization.java"/>
    </antcall>
  </target>

  <target name="harness_ListOfStructsSerialization">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="ListOfStructsSerialization.java"/>
    </antcall>
  </target>

  <target name="harness_LessSimplifiedTimedBackedSpeculation">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="LessSimplifiedTimedSpeculationTest.java"/>
    </antcall>
  </target>

  <target name="harness_SerializeNumberNumberMap">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="SerializeNumberNumberMapTest.java"/>
    </antcall>
  </target>

  <target name="harness_SerializeMapOfStructs">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="SerializeMapOfStructs.java"/>
    </antcall>
  </target>

  <target name="harness_InternalStructMethodCall">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="InternalStructMethodCallTest.java"/>
    </antcall>
  </target>

  <target name="harness_ReferenceServiceFactory">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="ReferenceServiceFactoryTest.java"/>
    </antcall>
  </target>

  <target name="harness_MultipleInterfaces">
    <antcall target="compile_harness">
      <param name="arg_harness_file_list" value="MultipleInterfacesTest.java"/>
    </antcall>
  </target>

  <target name="harness_SerializeStructWithMap">
    <antcall target="compile_harness">
      <param
          name="arg_harness_file_list"
          value="SerializeStructWithMap.java,SerializeStructHarnessHelper.java"/>
    </antcall>
  </target>

  <target name="harness_SerializeNullStruct">
    <antcall target="compile_harness">
      <param
          name="arg_harness_file_list"
          value="SerializeNullStruct.java,SerializeStructHarnessHelper.java"/>
    </antcall>
  </target>

  <target name="harness_SerializeStructWithList">
    <antcall target="compile_harness">
      <param
          name="arg_harness_file_list"
          value="SerializeStructWithList.java,SerializeStructHarnessHelper.java"/>
    </antcall>
  </target>

  <target name="harness_SerializeStructWithStruct">
    <antcall target="compile_harness">
      <param
          name="arg_harness_file_list"
          value="SerializeStructWithStruct.java,SerializeStructHarnessHelper.java"/>
    </antcall>
  </target>



  <!-- jarify experiments -->
  <property
      name="basic_setter_getter_jar"
      value="basic_setter_getter.jar"/>
  <target
      name="jar_BasicSetterGetter"
      depends="ralph_BasicSetterGetter,ralph_to_byte_code,harness_BasicSetterGetter">
    <antcall target="make_jar">
      <param name="main_class" value="BasicSetterGetter"/>
      <param name="dest_jar" value="${basic_setter_getter_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="loc_uuid_jar"
      value="loc_uuid.jar"/>
  <target
      name="jar_LocUuid"
      depends="ralph_LocUuid,ralph_to_byte_code,harness_LocUuid">
    <antcall target="make_jar">
      <param name="main_class" value="LocUuidTest"/>
      <param name="dest_jar" value="${loc_uuid_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="nested_atomic_setter_getter_jar"
      value="nested_atomic_setter_getter.jar"/>
  <target
      name="jar_NestedAtomicSetterGetter"
      depends="ralph_NestedAtomicSetterGetter,ralph_to_byte_code,harness_NestedAtomicSetterGetter">
    <antcall target="make_jar">
      <param name="main_class" value="NestedAtomicSetterGetterTest"/>
      <param name="dest_jar" value="${nested_atomic_setter_getter_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="direct_struct_wrapped_endpoint_jar"
      value="direct_struct_wrapped_endpoint.jar"/>
  <target
      name="jar_DirectStructWrappedEndpoint"
      depends="ralph_DirectStructWrappedEndpoint,ralph_to_byte_code,harness_DirectStructWrappedEndpoint">
    <antcall target="make_jar">
      <param name="main_class" value="DirectStructWrappedEndpoint"/>
      <param name="dest_jar" value="${direct_struct_wrapped_endpoint_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="versioned_setter_getter_jar"
      value="versioned_setter_getter.jar"/>
  <target
      name="jar_VersionedSetterGetter"
      depends="ralph_VersionedSetterGetter,ralph_to_byte_code,harness_VersionedSetterGetter">
    <antcall target="make_jar">
      <param name="main_class" value="VersionedSetterGetter"/>
      <param name="dest_jar" value="${versioned_setter_getter_jar}"/>
      <param name="config_properties" value="${in_memory_log_config}"/>
    </antcall>
  </target>

  <property
      name="recursive_partner_addition_jar"
      value="recursive_partner_addition.jar"/>
  <target
      name="jar_RecursivePartnerAddition"
      depends="ralph_RecursivePartnerAddition,ralph_to_byte_code,harness_RecursivePartnerAddition">
    <antcall target="make_jar">
      <param name="main_class" value="RecursivePartnerAddition"/>
      <param name="dest_jar" value="${recursive_partner_addition_jar}"/>
      <param name="config_properties" value="${in_memory_log_config}"/>
    </antcall>
  </target>

  <property
      name="disk_durability_setter_getter_jar"
      value="disk_durability_setter_getter.jar"/>
  <target
      name="jar_DiskDurabilitySetterGetter"
      depends="ralph_DurabilitySetterGetter,ralph_to_byte_code,harness_DurabilitySetterGetter">
    <antcall target="make_jar">
      <param name="main_class" value="DurabilitySetterGetter"/>
      <param name="dest_jar" value="${disk_durability_setter_getter_jar}"/>
      <param name="config_properties" value="${disk_durability_config}"/>
    </antcall>
  </target>

  <property
      name="disk_durability_constructor_check_jar"
      value="disk_durability_constructor_check.jar"/>
  <target
      name="jar_DiskDurabilityConstructorCheck"
      depends="ralph_DurabilityConstructorCheck,ralph_to_byte_code,harness_DurabilityConstructorCheck">
    <antcall target="make_jar">
      <param name="main_class" value="DurabilityConstructorCheck"/>
      <param name="dest_jar" value="${disk_durability_constructor_check_jar}"/>
      <param name="config_properties" value="${disk_durability_config}"/>
    </antcall>
  </target>

  <property
      name="versioned_enum_jar"
      value="versioned_enum.jar"/>
  <target
      name="jar_VersionedEnum"
      depends="ralph_VersionedEnum,ralph_to_byte_code,harness_VersionedEnum">
    <antcall target="make_jar">
      <param name="main_class" value="VersionedEnum"/>
      <param name="dest_jar" value="${versioned_enum_jar}"/>
      <param name="config_properties" value="${in_memory_log_config}"/>
    </antcall>
  </target>

  <property
      name="durability_many_services_replayer_jar"
      value="durability_many_services_replayer.jar"/>
  <target
      name="jar_DurabilityManyServicesReplayer"
      depends="ralph_DurabilityManyServicesReplayer,ralph_to_byte_code,
               harness_DurabilityManyServicesReplayer">
    <antcall target="make_jar">
      <param name="main_class" value="DurabilityManyServicesReplayer"/>
      <param name="dest_jar" value="${durability_many_services_replayer_jar}"/>
      <param name="config_properties" value="${disk_durability_config}"/>
    </antcall>
  </target>

  <property
      name="versioned_iface_jar"
      value="versioned_iface.jar"/>
  <target
      name="jar_VersionedIFace"
      depends="ralph_VersionedIFace,ralph_to_byte_code,harness_VersionedIFace">
    <antcall target="make_jar">
      <param name="main_class" value="VersionedIFace"/>
      <param name="dest_jar" value="${versioned_iface_jar}"/>
      <param name="config_properties" value="${in_memory_log_config}"/>
    </antcall>
  </target>

  <property
      name="mixed_accesses_jar"
      value="mixed_accesses.jar"/>
  <target
      name="jar_MixedAccesses"
      depends="ralph_MixedAccesses,ralph_to_byte_code,harness_MixedAccesses">
    <antcall target="make_jar">
      <param name="main_class" value="MixedAccessesTester"/>
      <param name="dest_jar" value="${mixed_accesses_jar}"/>
      <param name="config_properties" value="${multidisk_log_config}"/>
    </antcall>
  </target>

  <property
      name="replay_partner_number_change_jar"
      value="replay_partner_number_change.jar"/>
  <target
      name="jar_ReplayPartnerNumberChange"
      depends="ralph_ReplayPartnerNumberChange,ralph_to_byte_code,harness_ReplayPartnerNumberChange">
    <antcall target="make_jar">
      <param name="main_class" value="ReplayPartnerNumber"/>
      <param name="dest_jar" value="${replay_partner_number_change_jar}"/>
      <param name="config_properties" value="${in_memory_log_config}"/>
    </antcall>
  </target>

  <property
      name="replay_partner_struct_element_jar"
      value="replay_partner_struct_element.jar"/>
  <target
      name="jar_ReplayPartnerStructElement"
      depends="ralph_ReplayPartnerStructElement,ralph_to_byte_code,harness_ReplayPartnerStructElement">
    <antcall target="make_jar">
      <param name="main_class" value="ReplayPartnerStructElement"/>
      <param name="dest_jar" value="${replay_partner_struct_element_jar}"/>
      <param name="config_properties" value="${in_memory_log_config}"/>
    </antcall>
  </target>

  <property
      name="versioned_map_jar"
      value="versioned_map.jar"/>
  <target
      name="jar_VersionedMap"
      depends="ralph_VersionedMap,ralph_to_byte_code,harness_VersionedMap">
    <antcall target="make_jar">
      <param name="main_class" value="VersionedMap"/>
      <param name="dest_jar" value="${versioned_map_jar}"/>
      <param name="config_properties" value="${in_memory_log_config}"/>
    </antcall>
  </target>

  <property
      name="versioned_list_jar"
      value="versioned_list.jar"/>
  <target
      name="jar_VersionedList"
      depends="ralph_VersionedList,ralph_to_byte_code,harness_VersionedList">
    <antcall target="make_jar">
      <param name="main_class" value="VersionedList"/>
      <param name="dest_jar" value="${versioned_list_jar}"/>
      <param name="config_properties" value="${in_memory_log_config}"/>
    </antcall>
  </target>

  <property
      name="versioned_struct_list_jar"
      value="versioned_struct_list.jar"/>
  <target
      name="jar_VersionedStructList"
      depends="ralph_VersionedStructList,ralph_to_byte_code,harness_VersionedStructList">
    <antcall target="make_jar">
      <param name="main_class" value="VersionedStructList"/>
      <param name="dest_jar" value="${versioned_struct_list_jar}"/>
      <param name="config_properties" value="${in_memory_log_config}"/>
    </antcall>
  </target>

  <property
      name="versioned_struct_map_jar"
      value="versioned_struct_map.jar"/>
  <target
      name="jar_VersionedStructMap"
      depends="ralph_VersionedStructMap,ralph_to_byte_code,harness_VersionedStructMap">
    <antcall target="make_jar">
      <param name="main_class" value="VersionedStructMap"/>
      <param name="dest_jar" value="${versioned_struct_map_jar}"/>
      <param name="config_properties" value="${in_memory_log_config}"/>
    </antcall>
  </target>

  <property
      name="disk_versioned_struct_map_jar"
      value="disk_versioned_struct_map.jar"/>
  <target
      name="jar_DiskVersionedStructMap"
      depends="ralph_VersionedStructMap,ralph_to_byte_code,harness_VersionedStructMap">
    <antcall target="make_jar">
      <param name="main_class" value="VersionedStructMap"/>
      <param name="dest_jar" value="${disk_versioned_struct_map_jar}"/>
      <param name="config_properties" value="${disk_log_config}"/>
    </antcall>
  </target>

  <property
      name="disk_versioned_struct_list_jar"
      value="disk_versioned_struct_list.jar"/>
  <target
      name="jar_DiskVersionedStructList"
      depends="ralph_VersionedStructList,ralph_to_byte_code,harness_VersionedStructList">
    <antcall target="make_jar">
      <param name="main_class" value="VersionedStructList"/>
      <param name="dest_jar" value="${disk_versioned_struct_list_jar}"/>
      <param name="config_properties" value="${disk_log_config}"/>
    </antcall>
  </target>

  <property
      name="enum_jar"
      value="enum.jar"/>
  <target
      name="jar_Enum"
      depends="ralph_Enum,ralph_to_byte_code,harness_Enum">
    <antcall target="make_jar">
      <param name="main_class" value="EnumTest"/>
      <param name="dest_jar" value="${enum_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="durability_single_side_replayer_jar"
      value="durability_single_side_replayer.jar"/>
  <target
      name="jar_DurabilitySingleSideReplayer"
      depends="ralph_DurabilitySingleSideReplayer,ralph_to_byte_code,
               harness_DurabilitySingleSideReplayer">
    <antcall target="make_jar">
      <param name="main_class" value="DurabilitySingleSideReplayer"/>
      <param name="dest_jar" value="${durability_single_side_replayer_jar}"/>
      <param name="config_properties" value="${disk_durability_config}"/>
    </antcall>
  </target>

  <property
      name="multidisk_durability_single_side_replayer_jar"
      value="multidisk_durability_single_side_replayer.jar"/>
  <target
      name="jar_MultidiskDurabilitySingleSideReplayer"
      depends="ralph_DurabilitySingleSideReplayer,ralph_to_byte_code,
               harness_DurabilitySingleSideReplayer">
    <antcall target="make_jar">
      <param name="main_class" value="DurabilitySingleSideReplayer"/>
      <param name="dest_jar" value="${multidisk_durability_single_side_replayer_jar}"/>
      <param name="config_properties" value="${multidisk_log_config}"/>
    </antcall>
  </target>


  <property
      name="alias_enum_jar"
      value="alias_enum.jar"/>
  <target
      name="jar_AliasEnum"
      depends="ralph_AliasEnum,ralph_to_byte_code,harness_AliasEnum">
    <antcall target="make_jar">
      <param name="main_class" value="AliasEnumTest"/>
      <param name="dest_jar" value="${alias_enum_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="conn_uuid_jar"
      value="conn_uuid.jar"/>
  <target
      name="jar_ConnUuid"
      depends="ralph_ConnUuid,ralph_to_byte_code,harness_ConnUuid">
    <antcall target="make_jar">
      <param name="main_class" value="ConnUuidTest"/>
      <param name="dest_jar" value="${conn_uuid_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="basic_same_host_partner_jar"
      value="basic_same_host_partner.jar"/>
  <target
      name="jar_BasicSameHostPartner"
      depends="ralph_BasicSameHostPartner, ralph_to_byte_code, harness_BasicSameHostPartner">
    <antcall target="make_jar">
      <param name="main_class" value="BasicSameHostPartnerTest"/>
      <param name="dest_jar" value="${basic_same_host_partner_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="struct_enum_jar"
      value="struct_enum.jar"/>
  <target
      name="jar_StructEnum"
      depends="ralph_StructEnum,ralph_to_byte_code,harness_StructEnum">
    <antcall target="make_jar">
      <param name="main_class" value="StructEnumTest"/>
      <param name="dest_jar" value="${struct_enum_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="durability_replay_rpc_jar"
      value="durability_replay_rpc.jar"/>
  <target
      name="jar_DurabilityReplayRPC"
      depends="ralph_DurabilityReplayRPC,ralph_to_byte_code,
               harness_DurabilityReplayRPC">
    <antcall target="make_jar">
      <param name="main_class" value="DurabilityReplayRPC"/>
      <param name="dest_jar" value="${durability_replay_rpc_jar}"/>
      <param name="config_properties" value="${disk_durability_config}"/>
    </antcall>
  </target>

  <property
      name="read_only_speculate_jar"
      value="read_only_speculate.jar"/>
  <target
      name="jar_ReadOnlySpeculate"
      depends="ralph_ReadOnlySpeculate,ralph_to_byte_code,harness_ReadOnlySpeculate">
    <antcall target="make_jar">
      <param name="main_class" value="ReadOnlySpeculate"/>
      <param name="dest_jar" value="${read_only_speculate_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="struct_setter_getter_jar"
      value="struct_setter_getter.jar"/>
  <target
      name="jar_StructSetterGetter"
      depends="ralph_StructSetterGetter,ralph_to_byte_code,harness_StructSetterGetter">
    <antcall target="make_jar">
      <param name="main_class" value="StructSetterGetter"/>
      <param name="dest_jar" value="${struct_setter_getter_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="basic_internal_method_call_jar"
      value="basic_internal_method_call.jar"/>
  <target
      name="jar_BasicInternalMethodCall"
      depends="ralph_BasicInternalMethodCall,ralph_to_byte_code,harness_BasicInternalMethodCall">
    <antcall target="make_jar">
      <param name="main_class" value="BasicInternalMethodCall"/>
      <param name="dest_jar" value="${basic_internal_method_call_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="basic_test_atomically_jar"
      value="basic_test_atomically.jar"/>
  <target
      name="jar_BasicTestAtomically"
      depends="ralph_BasicTestAtomically,ralph_to_byte_code,harness_BasicTestAtomically">
    <antcall target="make_jar">
      <param name="main_class" value="BasicTestAtomically"/>
      <param name="dest_jar" value="${basic_test_atomically_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="tcp_partner_call_jar"
      value="tcp_partner_call.jar"/>
  <target
      name="jar_TCPPartnerCall"
      depends="ralph_TCPPartnerCall,ralph_to_byte_code,harness_TCPPartnerCall">
    <antcall target="make_jar">
      <param name="main_class" value="TCPPartnerCall"/>
      <param name="dest_jar" value="${tcp_partner_call_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="map_jar"
      value="map.jar"/>
  <target
      name="jar_Map"
      depends="ralph_Map,ralph_to_byte_code,harness_Map">
    <antcall target="make_jar">
      <param name="main_class" value="MapTester"/>
      <param name="dest_jar" value="${map_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="atomic_map_jar"
      value="atomic_map.jar"/>
  <target
      name="jar_AtomicMap"
      depends="ralph_AtomicMap,ralph_to_byte_code,harness_AtomicMap">
    <antcall target="make_jar">
      <param name="main_class" value="AtomicMapTester"/>
      <param name="dest_jar" value="${atomic_map_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="list_jar"
      value="list.jar"/>
  <target
      name="jar_List"
      depends="ralph_List,ralph_to_byte_code,harness_List">
    <antcall target="make_jar">
      <param name="main_class" value="ListTester"/>
      <param name="dest_jar" value="${list_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="atomic_list_jar"
      value="atomic_list.jar"/>
  <target
      name="jar_AtomicList"
      depends="ralph_AtomicList,ralph_to_byte_code,harness_AtomicList">
    <antcall target="make_jar">
      <param name="main_class" value="AtomicListTester"/>
      <param name="dest_jar" value="${atomic_list_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="many_list_ops_jar"
      value="many_list_ops.jar"/>
  <target
      name="jar_ManyListOps"
      depends="ralph_AtomicList,ralph_to_byte_code,harness_ManyListOps">
    <antcall target="make_jar">
      <param name="main_class" value="ManyListOps"/>
      <param name="dest_jar" value="${many_list_ops_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>


  <property
      name="nested_structs_jar"
      value="nested_structs.jar"/>
  <target
      name="jar_NestedStructs"
      depends="ralph_NestedStructs,ralph_to_byte_code,harness_NestedStructs">
    <antcall target="make_jar">
      <param name="main_class" value="NestedStructs"/>
      <param name="dest_jar" value="${nested_structs_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="for_list_jar"
      value="for_list.jar"/>
  <target
      name="jar_ForList"
      depends="ralph_ForList,ralph_to_byte_code,harness_ForList">
    <antcall target="make_jar">
      <param name="main_class" value="ForList"/>
      <param name="dest_jar" value="${for_list_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="for_map_jar"
      value="for_map.jar"/>
  <target
      name="jar_ForMap"
      depends="ralph_ForMap,ralph_to_byte_code,harness_ForMap">
    <antcall target="make_jar">
      <param name="main_class" value="ForMap"/>
      <param name="dest_jar" value="${for_map_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="struct_libraries_jar"
      value="struct_libraries.jar"/>
  <target
      name="jar_StructLibraries"
      depends="ralph_StructLibraries,ralph_to_byte_code,harness_StructLibraries">
    <antcall target="make_jar">
      <param name="main_class" value="StructLibraries"/>
      <param name="dest_jar" value="${struct_libraries_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>


  <property
      name="delay_and_contend_jar"
      value="delay_and_contend.jar"/>
  <target
      name="jar_DelayAndContend"
      depends="ralph_DelayAndContend,ralph_to_byte_code,harness_DelayAndContend">
    <antcall target="make_jar">
      <param name="main_class" value="DelayAndContendTest"/>
      <param name="dest_jar" value="${delay_and_contend_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>


  <property
      name="interrupted_atomically_jar"
      value="interrupted_atomically.jar"/>
  <target
      name="jar_InterruptedAtomically"
      depends="ralph_InterruptedAtomically,ralph_to_byte_code,harness_InterruptedAtomically">
    <antcall target="make_jar">
      <param name="main_class" value="InterruptedTestAtomically"/>
      <param name="dest_jar" value="${interrupted_atomically_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="endpoint_calls_jar"
      value="endpoint_calls.jar"/>
  <target
      name="jar_EndpointCalls"
      depends="ralph_EndpointCalls,ralph_to_byte_code,harness_EndpointCalls">
    <antcall target="make_jar">
      <param name="main_class" value="EndpointCalls"/>
      <param name="dest_jar" value="${endpoint_calls_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="interrupted_endpoint_call_atomically_jar"
      value="interrupted_endpoint_call_atomically.jar"/>
  <target
      name="jar_InterruptedEndpointCallAtomically"
      depends="ralph_InterruptedEndpointCallAtomically,
               ralph_to_byte_code,harness_InterruptedEndpointCallAtomically">
    <antcall target="make_jar">
      <param name="main_class" value="InterruptedEndpointCallAtomically"/>
      <param name="dest_jar" value="${interrupted_endpoint_call_atomically_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="promotion_jar"
      value="promotion.jar"/>
  <target
      name="jar_Promotion"
      depends="ralph_Promotion,ralph_to_byte_code,harness_Promotion">
    <antcall target="make_jar">
      <param name="main_class" value="PromotionTest"/>
      <param name="dest_jar" value="${promotion_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>


  <property
      name="super_interrupted_atomically_jar"
      value="super_interrupted_atomically.jar"/>
  <target
      name="jar_SuperInterruptedAtomically"
      depends="ralph_SuperInterruptedAtomically,
               ralph_to_byte_code,harness_SuperInterruptedAtomically">
    <antcall target="make_jar">
      <param name="main_class" value="SuperInterruptedTestAtomically"/>
      <param name="dest_jar" value="${super_interrupted_atomically_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="hardware_failure_jar"
      value="hardware_failure.jar"/>
  <target
      name="jar_HardwareFailure"
      depends="ralph_HardwareFailure,ralph_to_byte_code,harness_HardwareFailure">
    <antcall target="make_jar">
      <param name="main_class" value="HardwareFailureTest"/>
      <param name="dest_jar" value="${hardware_failure_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="return_list_jar"
      value="return_list.jar"/>
  <target
      name="jar_ReturnList"
      depends="ralph_ReturnList,ralph_to_byte_code,harness_ReturnList">
    <antcall target="make_jar">
      <param name="main_class" value="ReturnListTest"/>
      <param name="dest_jar" value="${return_list_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="wound_wait_jar"
      value="wound_wait.jar"/>
  <target
      name="jar_WoundWait"
      depends="ralph_WoundWait,ralph_to_byte_code,harness_WoundWait">
    <antcall target="make_jar">
      <param name="main_class" value="WoundWaitTest"/>
      <param name="dest_jar" value="${wound_wait_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="atomic_partner_call_jar"
      value="atomic_partner_call.jar"/>
  <target
      name="jar_AtomicPartnerCall"
      depends="ralph_AtomicPartnerCall,ralph_to_byte_code,harness_AtomicPartnerCall">
    <antcall target="make_jar">
      <param name="main_class" value="AtomicPartnerCall"/>
      <param name="dest_jar" value="${atomic_partner_call_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="random_failure_extended_list_jar"
      value="random_failure_extended_list.jar"/>
  <target
      name="jar_RandomFailureExtendedList"
      depends="ralph_RandomFailureExtendedList,ralph_to_byte_code,harness_RandomFailureExtendedList">
    <antcall target="make_jar">
      <param name="main_class" value="RandomFailureExtendedList"/>
      <param name="dest_jar" value="${random_failure_extended_list_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="atomic_list_append_jar"
      value="atomic_list_append.jar"/>
  <target
      name="jar_AtomicListAppend"
      depends="ralph_AtomicListAppend,ralph_to_byte_code,harness_AtomicListAppend">
    <antcall target="make_jar">
      <param name="main_class" value="AtomicListAppend"/>
      <param name="dest_jar" value="${atomic_list_append_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="wrapped_same_host_remote_call_jar"
      value="wrapped_same_host_remote_call.jar"/>
  <target
      name="jar_WrappedSameHostRemoteCall"
      depends="ralph_WrappedSameHostRemoteCall,
               ralph_to_byte_code,harness_WrappedSameHostRemoteCall">
    <antcall target="make_jar">
      <param name="main_class" value="WrappedSameHostRemoteCall"/>
      <param name="dest_jar" value="${wrapped_same_host_remote_call_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="linked_jar"
      value="linked.jar"/>
  <target
      name="jar_Linked"
      depends="ralph_Linked,ralph_to_byte_code,harness_Linked">
    <antcall target="make_jar">
      <param name="main_class" value="LinkedTests"/>
      <param name="dest_jar" value="${linked_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="single_side_service_factory_jar"
      value="single_side_service_factory.jar"/>
  <target
      name="jar_SingleSideServiceFactory"
      depends="ralph_SingleSideServiceFactory,
               ralph_to_byte_code,harness_SingleSideServiceFactory">
    <antcall target="make_jar">
      <param name="main_class" value="SingleSideServiceFactoryTest"/>
      <param name="dest_jar" value="${single_side_service_factory_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="partner_service_factory_jar"
      value="partner_service_factory.jar"/>
  <target
      name="jar_PartnerServiceFactory"
      depends="ralph_PartnerServiceFactory,
               ralph_to_byte_code,harness_PartnerServiceFactory">
    <antcall target="make_jar">
      <param name="main_class" value="PartnerSendServiceFactoryTest"/>
      <param name="dest_jar" value="${partner_service_factory_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="endpoint_struct_list_jar"
      value="endpoint_struct_list.jar"/>
  <target
      name="jar_EndpointStructList"
      depends="ralph_EndpointStructList,
               ralph_to_byte_code,harness_EndpointStructList">
    <antcall target="make_jar">
      <param name="main_class" value="EndpointStructListTest"/>
      <param name="dest_jar" value="${endpoint_struct_list_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="basic_speculation_jar"
      value="basic_speculation.jar"/>
  <target
      name="jar_BasicSpeculation"
      depends="ralph_BasicSpeculation,
               ralph_to_byte_code,harness_BasicSpeculation">
    <antcall target="make_jar">
      <param name="main_class" value="BasicSpeculationTest"/>
      <param name="dest_jar" value="${basic_speculation_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="null_jar"
      value="null.jar"/>
  <target
      name="jar_Null"
      depends="ralph_Null,ralph_to_byte_code,harness_Null">
    <antcall target="make_jar">
      <param name="main_class" value="NullTest"/>
      <param name="dest_jar" value="${null_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="internal_create_service_jar"
      value="internal_create_service.jar"/>
  <target
      name="jar_InternalCreateService"
      depends="ralph_InternalCreateService,
               ralph_to_byte_code,harness_InternalCreateService">
    <antcall target="make_jar">
      <param name="main_class" value="InternalCreateServiceTest"/>
      <param name="dest_jar" value="${internal_create_service_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="self_jar"
      value="self.jar"/>
  <target
      name="jar_Self"
      depends="ralph_Self,ralph_to_byte_code,harness_Self">
    <antcall target="make_jar">
      <param name="main_class" value="SelfTest"/>
      <param name="dest_jar" value="${self_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="container_speculation_jar"
      value="container_speculation.jar"/>
  <target
      name="jar_ContainerSpeculation"
      depends="ralph_ContainerSpeculation,
               ralph_to_byte_code,harness_ContainerSpeculation">
    <antcall target="make_jar">
      <param name="main_class" value="ContainerSpeculationTest"/>
      <param name="dest_jar" value="${container_speculation_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="range_jar"
      value="range.jar"/>
  <target
      name="jar_Range"
      depends="ralph_Range,ralph_to_byte_code,harness_Range">
    <antcall target="make_jar">
      <param name="main_class" value="Range"/>
      <param name="dest_jar" value="${range_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="read_read_write_speculation_jar"
      value="read_read_write_speculation.jar"/>
  <target
      name="jar_ReadReadWriteSpeculation"
      depends="ralph_ReadReadWriteSpeculation,
               ralph_to_byte_code,harness_ReadReadWriteSpeculation">
    <antcall target="make_jar">
      <param name="main_class" value="ReadReadWriteTest"/>
      <param name="dest_jar" value="${read_read_write_speculation_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="interrupted_speculater_jar"
      value="interrupted_speculater.jar"/>
  <target
      name="jar_InterruptedSpeculater"
      depends="ralph_InterruptedSpeculaterTest,
               ralph_to_byte_code,harness_InterruptedSpeculater">
    <antcall target="make_jar">
      <param name="main_class" value="InterruptedSpeculaterTest"/>
      <param name="dest_jar" value="${interrupted_speculater_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="middle_interrupted_speculater_jar"
      value="middle_interrupted_speculater.jar"/>
  <target
      name="jar_MiddleInterruptedSpeculater"
      depends="ralph_MiddleInterruptedSpeculaterTest,
               ralph_to_byte_code,harness_MiddleInterruptedSpeculater">
    <antcall target="make_jar">
      <param name="main_class" value="MiddleInterruptedSpeculaterTest"/>
      <param name="dest_jar" value="${middle_interrupted_speculater_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="always_works_backed_speculation_jar"
      value="always_works_backed_speculation.jar"/>
  <target
      name="jar_AlwaysWorksBackedSpeculation"
      depends="ralph_AlwaysWorksBackedSpeculationTest,
               ralph_to_byte_code,harness_AlwaysWorksBackedSpeculation">
    <antcall target="make_jar">
      <param name="main_class" value="AlwaysWorksBackedSpeculationTest"/>
      <param name="dest_jar" value="${always_works_backed_speculation_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="random_delays_always_works_backed_speculation_jar"
      value="random_delays_always_works_backed_speculation.jar"/>
  <target
      name="jar_RandomDelaysAlwaysWorksBackedSpeculation"
      depends="ralph_RandomDelaysAlwaysWorksBackedSpeculationTest,
               ralph_to_byte_code,harness_RandomDelaysAlwaysWorksBackedSpeculation">
    <antcall target="make_jar">
      <param name="main_class" value="RandomDelaysAlwaysWorksBackedSpeculationTest"/>
      <param name="dest_jar" value="${random_delays_always_works_backed_speculation_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="random_failures_backed_speculation_jar"
      value="random_failures_backed_speculation.jar"/>
  <target
      name="jar_RandomFailuresBackedSpeculation"
      depends="ralph_RandomFailuresBackedSpeculationTest,
               ralph_to_byte_code,harness_RandomFailuresBackedSpeculation">
    <antcall target="make_jar">
      <param name="main_class" value="RandomFailuresBackedSpeculationTest"/>
      <param name="dest_jar" value="${random_failures_backed_speculation_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="atomic_struct_jar"
      value="atomic_struct.jar"/>
  <target
      name="jar_AtomicStruct"
      depends="ralph_AtomicStruct,
               ralph_to_byte_code,harness_AtomicStruct">
    <antcall target="make_jar">
      <param name="main_class" value="AtomicStructTest"/>
      <param name="dest_jar" value="${atomic_struct_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="text_manipulation_jar"
      value="text_manipulation.jar"/>
  <target
      name="jar_TextManipulation"
      depends="ralph_TextManipulation,
               ralph_to_byte_code,harness_TextManipulation">
    <antcall target="make_jar">
      <param name="main_class" value="TextManipulation"/>
      <param name="dest_jar" value="${text_manipulation_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="lots_of_backouts_jar"
      value="lots_of_backouts.jar"/>
  <target
      name="jar_LotsOfBackouts"
      depends="ralph_LotsOfBackouts,
               ralph_to_byte_code,harness_LotsOfBackouts">
    <antcall target="make_jar">
      <param name="main_class" value="LotsOfBackoutsTest"/>
      <param name="dest_jar" value="${lots_of_backouts_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="timed_always_works_backed_speculation_jar"
      value="lots_of_backouts.jar"/>
  <target
      name="jar_TimedAlwaysWorksBackedSpeculation"
      depends="ralph_TimedAlwaysWorksBackedSpeculationTest,
               ralph_to_byte_code,harness_TimedAlwaysWorksBackedSpeculation">
    <antcall target="make_jar">
      <param name="main_class" value="TimedAlwaysWorksBackedSpeculationTest"/>
      <param name="dest_jar" value="${timed_always_works_backed_speculation_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="simplified_timed_speculation_jar"
      value="simplified_timed_speculation.jar"/>
  <target
      name="jar_SimplifiedTimedSpeculation"
      depends="ralph_SimplifiedTimedSpeculationTest,
               ralph_to_byte_code,harness_SimplifiedTimedSpeculation">
    <antcall target="make_jar">
      <param name="main_class" value="SimplifiedTimedSpeculationTest"/>
      <param name="dest_jar" value="${simplified_timed_speculation_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="partner_call_return_jar"
      value="partner_call_return.jar"/>
  <target
      name="jar_PartnerCallReturn"
      depends="ralph_PartnerCallReturn,
               ralph_to_byte_code,harness_PartnerCallReturn">
    <antcall target="make_jar">
      <param name="main_class" value="PartnerCallReturn"/>
      <param name="dest_jar" value="${partner_call_return_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="serialize_number_list_jar"
      value="serialize_number_list.jar"/>
  <target
      name="jar_SerializeNumberList"
      depends="ralph_SerializeNumberList,
               ralph_to_byte_code,harness_SerializeNumberList">
    <antcall target="make_jar">
      <param name="main_class" value="SerializeNumberListTest"/>
      <param name="dest_jar" value="${serialize_number_list_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="serialize_text_list_jar"
      value="serialize_text_list.jar"/>
  <target
      name="jar_SerializeTextList"
      depends="ralph_SerializeTextList,
               ralph_to_byte_code,harness_SerializeTextList">
    <antcall target="make_jar">
      <param name="main_class" value="SerializeTextListTest"/>
      <param name="dest_jar" value="${serialize_text_list_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="serialize_true_false_list_jar"
      value="serialize_true_false_list.jar"/>
  <target
      name="jar_SerializeTrueFalseList"
      depends="ralph_SerializeTrueFalseList,
               ralph_to_byte_code,harness_SerializeTrueFalseList">
    <antcall target="make_jar">
      <param name="main_class" value="SerializeTrueFalseListTest"/>
      <param name="dest_jar" value="${serialize_true_false_list_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>


  <property
      name="serialize_struct_jar"
      value="serialize_struct.jar"/>
  <target
      name="jar_SerializeStruct"
      depends="ralph_SerializeStructTest,
               ralph_to_byte_code,harness_SerializeStruct">
    <antcall target="make_jar">
      <param name="main_class" value="StructSerialization"/>
      <param name="dest_jar" value="${serialize_struct_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="list_of_structs_serialization_jar"
      value="list_of_structs_serialization.jar"/>
  <target
      name="jar_ListOfStructsSerialization"
      depends="ralph_ListOfStructsSerialization,
               ralph_to_byte_code,harness_ListOfStructsSerialization">
    <antcall target="make_jar">
      <param name="main_class" value="ListOfStructsSerialization"/>
      <param name="dest_jar" value="${list_of_structs_serialization_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="less_simplified_timed_backed_speculation_jar"
      value="less_simplified_timed_backed_speculation.jar"/>
  <target
      name="jar_LessSimplifiedTimedBackedSpeculation"
      depends="ralph_LessSimplifiedTimedBackedSpeculation,
               ralph_to_byte_code,harness_LessSimplifiedTimedBackedSpeculation">
    <antcall target="make_jar">
      <param name="main_class" value="LessSimplifiedTimedSpeculationTest"/>
      <param name="dest_jar" value="${less_simplified_timed_backed_speculation_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="serialize_number_number_map_jar"
      value="serialize_number_number_map.jar"/>
  <target
      name="jar_SerializeNumberNumberMap"
      depends="ralph_SerializeNumberNumberMap,
               ralph_to_byte_code,harness_SerializeNumberNumberMap">
    <antcall target="make_jar">
      <param name="main_class" value="SerializeNumberNumberMapTest"/>
      <param name="dest_jar" value="${serialize_number_number_map_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="serialize_map_of_structs_jar"
      value="serialize_map_of_structs.jar"/>
  <target
      name="jar_SerializeMapOfStructs"
      depends="ralph_SerializeMapOfStructs,
               ralph_to_byte_code,harness_SerializeMapOfStructs">
    <antcall target="make_jar">
      <param name="main_class" value="SerializeMapOfStructs"/>
      <param name="dest_jar" value="${serialize_map_of_structs_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="internal_struct_method_call_jar"
      value="internal_struct_method_call.jar"/>
  <target
      name="jar_InternalStructMethodCall"
      depends="ralph_InternalStructMethodCall,
               ralph_to_byte_code,harness_InternalStructMethodCall">
    <antcall target="make_jar">
      <param name="main_class" value="InternalStructMethodCallTest"/>
      <param name="dest_jar" value="${internal_struct_method_call_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="reference_service_factory_jar"
      value="reference_service_factory.jar"/>
  <target
      name="jar_ReferenceServiceFactory"
      depends="ralph_ReferenceServiceFactory,
               ralph_to_byte_code,harness_ReferenceServiceFactory">
    <antcall target="make_jar">
      <param name="main_class" value="ReferenceServiceFactoryTest"/>
      <param name="dest_jar" value="${reference_service_factory_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="multiple_interfaces_jar"
      value="multiple_interfaces.jar"/>
  <target
      name="jar_MultipleInterfaces"
      depends="ralph_MultipleInterfaces,
               ralph_to_byte_code,harness_MultipleInterfaces">
    <antcall target="make_jar">
      <param name="main_class" value="MultipleInterfacesTest"/>
      <param name="dest_jar" value="${multiple_interfaces_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="serialize_struct_with_map_jar"
      value="serialize_struct_with_map.jar"/>
  <target
      name="jar_SerializeStructWithMap"
      depends="ralph_SerializeStructWithMap,
               ralph_to_byte_code,harness_SerializeStructWithMap">
    <antcall target="make_jar">
      <param name="main_class" value="SerializeStructWithMap"/>
      <param name="dest_jar" value="${serialize_struct_with_map_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="serialize_struct_with_struct_jar"
      value="serialize_struct_with_struct.jar"/>
  <target
      name="jar_SerializeStructWithStruct"
      depends="ralph_SerializeStructWithStruct,
               ralph_to_byte_code,harness_SerializeStructWithStruct">
    <antcall target="make_jar">
      <param name="main_class" value="SerializeStructWithStruct"/>
      <param name="dest_jar" value="${serialize_struct_with_struct_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="serialize_struct_with_list_jar"
      value="serialize_struct_with_list.jar"/>
  <target
      name="jar_SerializeStructWithList"
      depends="ralph_SerializeStructWithList,
               ralph_to_byte_code,harness_SerializeStructWithList">
    <antcall target="make_jar">
      <param name="main_class" value="SerializeStructWithList"/>
      <param name="dest_jar" value="${serialize_struct_with_list_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>

  <property
      name="serialize_null_struct_jar"
      value="serialize_null_struct.jar"/>
  <target
      name="jar_SerializeNullStruct"
      depends="ralph_SerializeNullStruct,
               ralph_to_byte_code,harness_SerializeNullStruct">
    <antcall target="make_jar">
      <param name="main_class" value="SerializeNullStruct"/>
      <param name="dest_jar" value="${serialize_null_struct_jar}"/>
      <param name="config_properties" value="${no_log_config}"/>
    </antcall>
  </target>


  <!-- Make a jar -->
  <target
      name="make_jar"
      depends="compile_libs"
      description="Make a jar">
    <jar destfile="${jar_dir}/${dest_jar}" filesetmanifest="mergewithoutmain">
      <manifest>
        <attribute name="Main-Class" value="${harness_package}.${main_class}"/>
        <attribute name="Class-Path" value="${build.dir}:${proto_class_path}"/>
      </manifest>
      <fileset dir="${build.dir}"/>
      <fileset file="${config_properties}"/>
      <zipgroupfileset dir="${proto_jar_dir}" includes="**/*.jar" />
    </jar>
  </target>


  <!-- Delete the build directories -->
  <target name="clean" description="get rid of build dir">
    <delete dir="${build.dir}"/>
    <delete dir="${ralph_emitted.dir}"/>
    <delete dir="${jar_dir}"/>
    <!-- Delete ralph compiler output -->
    <delete file="parser.out"/>
    <delete file="parsetab.py"/>

  </target>

  <target
      name="clean_all"
      depends="clean"
      description="get rid of build dir and all built libs">

    <ant antfile="${lib_build_path}/build.xml" target="clean" />

  </target>
</project>
