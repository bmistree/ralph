<project name="RalphEmitTest" default="compile" basedir=".">
  
  <description>
    Test cases for java libraries.
  </description>

  <dirname
    property="emit_test_dir"
    file="${ant.file.RalphJavaLibTest}"
  />
    
  <!-- global properties for this build file -->
  <property name="build.dir" location="${emit_test_dir}/classes"/>
  <property name="ralph_src.dir" location="${emit_test_dir}/../ralph_src"/>
  <property name="ralph_emitted.dir" location="${emit_test_dir}/../ralph_emitted"/>
  <property name="test_src.dir" location="${emit_test_dir}/../emit_test_harnesses"/>
  <property
      name="lib_build_path"
      location="${emit_test_dir}/../../../ralph/java_lib/build"/>
  <property
      name="lib_class_path" location="${lib_build_path}/classes/"/>
  <property
      name="proto_class_path" location="${lib_build_path}/../protobuf-java-2.4.1.jar"/>
  <property name="ralph_compiler_py" location="${emit_test_dir}/../../emit_file.py"/>

  <property name="emitted_package" value="ralph_emitted"/>
  
  <!-- set up build directories for test -->
  <target name="init" description="setup build directories">
    <echo message="Setting up build directories for tests"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${ralph_emitted.dir}"/>
  </target>


  <!-- COMPILING -->
  <!-- compile java libraries -->
  <target name="compile_libs" depends="init" description="compile library files">
    <ant antfile="${lib_build_path}/build.xml" target="compile_all" />  
  </target>

  <target name="translate_ralph" depends="init" description="translate ralph files">
    <!-- Compile to java -->
    <echo message="${line.separator}iface_basic_ralph.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/iface_basic_ralph.rph"/>
      <arg line="-o ${ralph_emitted.dir}/IFaceBasicRalph.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c IFaceBasicRalph"/>
    </exec>

    
    <echo message="${line.separator}Emitting basic_ralph.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/basic_ralph.rph"/>
      <arg line="-o ${ralph_emitted.dir}/BasicRalph.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c BasicRalph"/>
    </exec>

    <echo message="${line.separator}Emitting internal_method_call.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/internal_method_call.rph"/>
      <arg line="-o ${ralph_emitted.dir}/InternalMethodCall.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c InternalMethodCall"/>
    </exec>

    <echo message="${line.separator}Emitting ralph_atomically.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/ralph_atomically.rph"/>
      <arg line="-o ${ralph_emitted.dir}/RalphAtomically.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c RalphAtomically"/>
    </exec>
    
    <echo message="${line.separator}Emitting basic_partner.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/basic_partner.rph"/>
      <arg line="-o ${ralph_emitted.dir}/BasicPartner.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c BasicPartner"/>
    </exec>
    
    <echo message="${line.separator}Emitting test_map.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/test_map.rph"/>
      <arg line="-o ${ralph_emitted.dir}/MapTest.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c MapTest"/>
    </exec>
    
    <echo message="${line.separator}Emitting atomic_map.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/atomic_map.rph"/>
      <arg line="-o ${ralph_emitted.dir}/AtomicMapTest.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c AtomicMapTest"/>
    </exec>
    
    <echo message="${line.separator}Emitting struct_test.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/struct_test.rph"/>
      <arg line="-o ${ralph_emitted.dir}/StructTest.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c StructTest"/>
    </exec>

    <echo message="${line.separator}Emitting nested_structs.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/nested_structs.rph"/>
      <arg line="-o ${ralph_emitted.dir}/NestedStructTest.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c NestedStructTest"/>
    </exec>

    <echo message="${line.separator}Emitting test_list.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/test_list.rph"/>
      <arg line="-o ${ralph_emitted.dir}/ListTest.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c ListTest"/>
    </exec>

    <echo message="${line.separator}Emitting atomic_list.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/atomic_list.rph"/>
      <arg line="-o ${ralph_emitted.dir}/AtomicListTest.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c AtomicListTest"/>
    </exec>

    <echo message="${line.separator}Emitting for_list.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/for_list.rph"/>
      <arg line="-o ${ralph_emitted.dir}/ForListTest.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c ForListTest"/>
    </exec>

    <echo message="${line.separator}Emitting for_map.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/for_map.rph"/>
      <arg line="-o ${ralph_emitted.dir}/ForMapTest.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c ForMapTest"/>
    </exec>

    <echo message="${line.separator}Emitting struct_lib.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/struct_lib.rph"/>
      <arg line="-o ${ralph_emitted.dir}/StructLib.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c StructLib"/>
    </exec>

    <echo message="${line.separator}Emitting struct_lib_user.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/struct_lib_user.rph"/>
      <arg line="-o ${ralph_emitted.dir}/StructLibUser.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c StructLibUser"/>
    </exec>

    <echo message="${line.separator}Emitting interrupted_atomically.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/interrupted_atomically.rph"/>
      <arg line="-o ${ralph_emitted.dir}/InterruptedAtomically.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c InterruptedAtomically"/>
    </exec>

    <echo message="${line.separator}Emitting endpoint_lib_user.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/endpoint_lib_user.rph"/>
      <arg line="-o ${ralph_emitted.dir}/EndpointLibUser.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c EndpointLibUser"/>
    </exec>

    <echo message="${line.separator}Emitting interrupted_endpoint_atomically.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/interrupted_endpoint_atomically.rph"/>
      <arg line="-o ${ralph_emitted.dir}/InterruptedEndpointAtomically.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c InterruptedEndpointAtomically"/>
    </exec>

    <echo message="${line.separator}Emitting promotion.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/promotion.rph"/>
      <arg line="-o ${ralph_emitted.dir}/Promotion.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c Promotion"/>
    </exec>

    <echo message="${line.separator}Emitting super_interrupted_atomically.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/super_interrupted_atomically.rph"/>
      <arg line="-o ${ralph_emitted.dir}/SuperInterruptedAtomically.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c SuperInterruptedAtomically"/>
    </exec>

    <echo message="${line.separator}Emitting hardware_failure.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/hardware_failure.rph"/>
      <arg line="-o ${ralph_emitted.dir}/HardwareFailure.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c HardwareFailure"/>
    </exec>

    <echo message="${line.separator}Emitting return_list.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/return_list.rph"/>
      <arg line="-o ${ralph_emitted.dir}/ReturnList.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c ReturnList"/>
    </exec>

    <echo message="${line.separator}Emitting atomic_partner.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/atomic_partner.rph"/>
      <arg line="-o ${ralph_emitted.dir}/AtomicPartner.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c AtomicPartner"/>
    </exec>

    <echo message="${line.separator}Emitting many_ops_atomic_list_fail.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/many_ops_atomic_list_fail.rph"/>
      <arg line="-o ${ralph_emitted.dir}/ManyOpsAtomicListFail.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c ManyOpsAtomicListFail"/>
    </exec>

    <echo message="${line.separator}Emitting atomic_list_append${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/atomic_list_append.rph"/>
      <arg line="-o ${ralph_emitted.dir}/AtomicListAppend.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c AtomicListAppend"/>
    </exec>

    <echo message="${line.separator}Emitting endpoint_struct_list${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/endpoint_struct_list.rph"/>
      <arg line="-o ${ralph_emitted.dir}/EndpointStructList.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c EndpointStructList"/>
    </exec>

    <echo message="${line.separator}wrapped_partner.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/wrapped_partner.rph"/>
      <arg line="-o ${ralph_emitted.dir}/WrappedPartner.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c WrappedPartner"/>
    </exec>

    
    <echo message="${line.separator}linked_instanced.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/linked_instance.rph"/>
      <arg line="-o ${ralph_emitted.dir}/LinkedInstance.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c LinkedInstance"/>
    </exec>

    <echo message="${line.separator}linked_connection.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/linked_connection.rph"/>
      <arg line="-o ${ralph_emitted.dir}/LinkedConnection.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c LinkedConnection"/>
    </exec>

    <echo message="${line.separator}single_side_service_factory.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/single_side_service_factory.rph"/>
      <arg line="-o ${ralph_emitted.dir}/SingleSideServiceFactory.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c SingleSideServiceFactory"/>
    </exec>

    <echo message="${line.separator}partner_service_factory.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/partner_service_factory.rph"/>
      <arg line="-o ${ralph_emitted.dir}/PartnerServiceFactory.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c PartnerServiceFactory"/>
    </exec>

    <echo message="${line.separator}basic_speculation.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/basic_speculation.rph"/>
      <arg line="-o ${ralph_emitted.dir}/BasicSpeculation.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c BasicSpeculation"/>
    </exec>

    <echo message="${line.separator}null.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/null.rph"/>
      <arg line="-o ${ralph_emitted.dir}/Null.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c Null"/>
    </exec>

    <echo message=
          "${line.separator}internal_create_service.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/internal_create_service.rph"/>
      <arg line="-o ${ralph_emitted.dir}/InternalCreateServiceJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c InternalCreateServiceJava"/>
    </exec>

    <echo message="${line.separator}self.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/self.rph"/>
      <arg line="-o ${ralph_emitted.dir}/SelfJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c SelfJava"/>
    </exec>

    <echo message="${line.separator}wrapped_iface.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/wrapped_iface.rph"/>
      <arg line="-o ${ralph_emitted.dir}/WrappedIFaceJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c WrappedIFaceJava"/>
    </exec>

    <echo message="${line.separator}container_speculation.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/container_speculation.rph"/>
      <arg line="-o ${ralph_emitted.dir}/ContainerSpeculationJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c ContainerSpeculationJava"/>
    </exec>

    <echo message="${line.separator}range_test.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/range_test.rph"/>
      <arg line="-o ${ralph_emitted.dir}/RangeTestJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c RangeTestJava"/>
    </exec>

    <echo message="${line.separator}read_read_write_speculation.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/read_read_write_speculation.rph"/>
      <arg line="-o ${ralph_emitted.dir}/ReadReadWriteSpeculationJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c ReadReadWriteSpeculationJava"/>
    </exec>

    <echo message="${line.separator}interrupted_speculater.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/interrupted_speculater.rph"/>
      <arg line="-o ${ralph_emitted.dir}/InterruptedSpeculaterJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c InterruptedSpeculaterJava"/>
    </exec>

    <echo message="${line.separator}middle_interrupted_speculater.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/middle_interrupted_speculater.rph"/>
      <arg line="-o ${ralph_emitted.dir}/MiddleInterruptedSpeculaterJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c MiddleInterruptedSpeculaterJava"/>
    </exec>

    <echo message="${line.separator}backed_speculation.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/backed_speculation.rph"/>
      <arg line="-o ${ralph_emitted.dir}/BackedSpeculationJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c BackedSpeculationJava"/>
    </exec>

    <echo message="${line.separator}atomic_struct.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/atomic_struct.rph"/>
      <arg line="-o ${ralph_emitted.dir}/AtomicStructJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c AtomicStructJava"/>
    </exec>

    <echo message="${line.separator}text_add_and_to_text.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/text_add_and_to_text.rph"/>
      <arg line="-o ${ralph_emitted.dir}/TextAddAndToTextJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c TextAddAndToTextJava"/>
    </exec>

    <echo message="${line.separator}lots_of_backouts.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/lots_of_backouts.rph"/>
      <arg line="-o ${ralph_emitted.dir}/LotsOfBackoutsJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c LotsOfBackoutsJava"/>
    </exec>

    <echo message="${line.separator}multiline_string.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/multiline_string.rph"/>
      <arg line="-o ${ralph_emitted.dir}/MultilineStringJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c MultilineStringJava"/>
    </exec>

    <echo message="${line.separator}simplified_backed_speculation.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/simplified_backed_speculation.rph"/>
      <arg line="-o ${ralph_emitted.dir}/SimplifiedBackedSpeculationJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c SimplifiedBackedSpeculationJava"/>
    </exec>
    
    <echo message="${line.separator}serialize_list.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/serialize_list.rph"/>
      <arg line="-o ${ralph_emitted.dir}/SerializeListJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c SerializeListJava"/>
    </exec>

    <echo message="${line.separator}partner_number_return.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/partner_number_return.rph"/>
      <arg line="-o ${ralph_emitted.dir}/PartnerNumberReturnJava.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c PartnerNumberReturnJava"/>
    </exec>
    
  </target>

  
  <target name="ralph_to_byte_code" depends="init,compile_libs" description="compile ralph files">
    <!-- Compile all ralph java to bytecode -->
    <javac
        srcdir="${ralph_emitted.dir}"
        destdir="${build.dir}"
        classpath="${lib_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false" />
  </target>

    
  <!-- compile ralph endpoints to java programs, including translating -->
  <target
      name="compile_ralph"
      depends="init,compile_libs,translate_ralph,ralph_to_byte_code"
      description="compile ralph files">
  </target>

  <target
      name="compile_ralph_tests"
      depends="init,compile_ralph"
      description="compile basic ralph">
    <!-- compile all ralph tests  -->
    <javac
        srcdir="${test_src.dir}"
        destdir="${build.dir}"
        classpath="${build.dir}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false" />
  </target>

  <!-- RUNNING TESTS -->
  <target
      name="run_all"
      depends=
        "run_BasicSetterGetter, run_BasicInternalMethodCall,
         run_BasicTestAtomically,run_BasicPartnerCall,run_MapTest,
         run_AtomicMapTest,run_StructSetterGetter,run_NestedStructTest,
         run_ListTest,run_AtomicListTest,run_ForListTest,run_ForMapTest,
         run_StructLibraries,run_InterruptedAtomically,run_EndpointCalls,
         run_InterruptedEndpointCallAtomically,run_PromotionTest,
         run_SuperInterruptedAtomically,run_HardwareFailure,run_ReturnList,
         run_WoundWait,run_TCPPartnerCall,run_AtomicPartnerCall,
         run_AtomicTCPPartnerCall,run_RandomFailureExtendedList,
         run_WrappedPartnerTCPCall,run_LinkedTests,run_SingleSideServiceFactory,
         run_PartnerServiceFactory,run_EndpointStructListTest,run_BasicSpeculation,
         run_NullTest,run_InternalCreateService,run_Self,run_ContainerSpeculation,
         run_Range,run_ReadReadWriteSpeculation,run_InterruptedSpeculaterTest,
         run_MiddleInterruptedSpeculaterTest,run_AlwaysWorksBackedSpeculationTest,
         run_RandomDelaysAlwaysWorksBackedSpeculationTest,
         run_RandomFailuresBackedSpeculationTest, run_AtomicStructTest,
         run_TextManipulation,run_LotsOfBackouts,
         run_TimedAlwaysWorksBackedSpeculationTest,
         run_SimplifiedTimedSpeculationTest, run_PartnerCallReturn,
         run_SerializeListTest">
  </target>
  
  
  
  <!-- Single side setter getter -->
  <target
      name="run_BasicSetterGetter"
      depends="compile_ralph_tests"
      description="Single side setter getter test.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.BasicSetterGetter"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Struct setter getter -->
  <target
      name="run_StructSetterGetter"
      depends="compile_ralph_tests"
      description="Setters and getters on struct fields test.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.StructSetterGetter"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>
  
  <!-- Internal method call on single host -->
  <target
      name="run_BasicInternalMethodCall"
      depends="compile_ralph_tests"
      description="Single side internal method call.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.BasicInternalMethodCall"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Atomically change -->
  <target
      name="run_BasicTestAtomically"
      depends="compile_ralph_tests"
      description="Test nested atomically-s.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.BasicTestAtomically"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>
  

  <!-- Partner call -->
  <target
      name="run_BasicPartnerCall"
      depends="compile_ralph_tests"
      description="Test calling partner methods.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.BasicPartnerCall"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>
  
  <!-- TCP partner call -->
  <target
      name="run_TCPPartnerCall"
      depends="compile_ralph_tests"
      description="Test calling partner methods over TCP.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.TCPPartnerCall"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  
  <!-- MapTesting -->
  <target
      name="run_MapTest"
      depends="compile_ralph_tests"
      description="Test map methods.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.MapTester"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>
  
  <!-- Atomic map test -->
  <target
      name="run_AtomicMapTest"
      depends="compile_ralph_tests"
      description="Test atomic map methods.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.AtomicMapTester"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- ListTesting -->
  <target
      name="run_ListTest"
      depends="compile_ralph_tests"
      description="Test list methods.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.ListTester"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- AtomicListTesting -->
  <target
      name="run_AtomicListTest"
      depends="compile_ralph_tests"
      description="Test atomic list methods.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.AtomicListTester"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Nested struct test -->
  <target
      name="run_NestedStructTest"
      depends="compile_ralph_tests"
      description="Test nested struct.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.NestedStructs"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- For list test -->
  <target
      name="run_ForListTest"
      depends="compile_ralph_tests"
      description="Test for loop on lists.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.ForList"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- For map test -->
  <target
      name="run_ForMapTest"
      depends="compile_ralph_tests"
      description="Test for loop on maps.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.ForMap"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Struct libraries -->
  <target
      name="run_StructLibraries"
      depends="compile_ralph_tests"
      description="Tests that can import a struct from another library.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.StructLibraries"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>


  <!-- Run interrupted atomically -->
  <target
      name="run_InterruptedAtomically"
      depends="compile_ralph_tests"
      description="Tests that handles atomic events' being interrupted.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.InterruptedTestAtomically"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  
  <!-- Run endpoint calls -->
  <target
      name="run_EndpointCalls"
      depends="compile_ralph_tests"  
      description="Tests issue endpoint calls from within ralph.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.EndpointCalls"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>
  
  <!-- Run interrupted endpoint calls -->
  <target
      name="run_InterruptedEndpointCallAtomically"
      depends="compile_ralph_tests"  
      description="Tests ensure atomically wrapper between endpoint calls works.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.InterruptedEndpointCallAtomically"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run promotion test -->
  <target
      name="run_PromotionTest"
      depends="compile_ralph_tests"
      description="Tests quality of service through promotions.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.PromotionTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run super event priority test -->
  <target
      name="run_SuperInterruptedAtomically"
      depends="compile_ralph_tests"
      description="Tests that can run with super priority.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.SuperInterruptedTestAtomically"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run hardware failure test -->
  <target
      name="run_HardwareFailure"
      depends="compile_ralph_tests"
      description="Tests that system can handle hardware failures.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.HardwareFailureTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run return list -->
  <target
      name="run_ReturnList"
      depends="compile_ralph_tests"
      description="Tests that can return a list.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.ReturnListTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run wound wait test -->
  <target
      name="run_WoundWait"
      depends="compile_ralph_tests"
      description="Tests that wound/wait works.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.WoundWaitTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>


  <!-- Run atomic partner call -->
  <target
      name="run_AtomicPartnerCall"
      depends="compile_ralph_tests"
      description="Tests that can make atomic partner calls.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.AtomicPartnerCall"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run TCP atomic partner call -->
  <target
      name="run_AtomicTCPPartnerCall"
      depends="compile_ralph_tests"
      description="Tests that can make atomic partner calls over TCP.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.AtomicTCPPartnerCall"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>


  <!-- Run RandomFailureExtendedList -->
  <target
      name="run_RandomFailureExtendedList"
      depends="compile_ralph_tests"
      description="Tests that can make atomic partner calls over TCP.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.RandomFailureExtendedList"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run AtomicListAppendTest -->
  <target
      name="run_AtomicListAppend"
      depends="compile_ralph_tests"
      description="Ensures append works on atomic lists.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.AtomicListAppendTester"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run WrappedPartnerTCPCall   -->
  <target
      name="run_WrappedPartnerTCPCall"
      depends="compile_ralph_tests"
      description="Can make a tcp call from endpoint call.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.WrappedTCPPartnerCall"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run LinkedTests -->
  <target
      name="run_LinkedTests"
      depends="compile_ralph_tests"
      description="Can make a mixture of endpoint and partner calls and still complete.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.LinkedTests"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>


  <!-- Run SingleSideServiceFactory -->
  <target
      name="run_SingleSideServiceFactory"
      depends="compile_ralph_tests"
      description="Run service factory">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.SingleSideServiceFactoryTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run PartnerServiceFactory -->
  <target
      name="run_PartnerServiceFactory"
      depends="compile_ralph_tests"
      description="Run partner service factory">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.PartnerSendServiceFactoryTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>


  <!-- Run EndpointStructListTest -->
  <target
      name="run_EndpointStructListTest"
      depends="compile_ralph_tests"
      description="Run endpoint struct list test">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.EndpointStructListTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>        
  
  <!-- Run BasicSpeculation -->
  <target
      name="run_BasicSpeculation"
      depends="compile_ralph_tests"
      description="Run basic speculation test.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.BasicSpeculationTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run NullTest -->
  <target
      name="run_NullTest"
      depends="compile_ralph_tests"
      description="Run basic null test.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.NullTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run InternalCreateService -->
  <target
      name="run_InternalCreateService"
      depends="compile_ralph_tests"
      description="Run internal create service.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.InternalCreateServiceTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>


  <!-- Run SelfTest -->
  <target
      name="run_Self"
      depends="compile_ralph_tests"
      description="Run self.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.SelfTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>


  <!-- Run ContainerSpeculationTest -->
  <target
      name="run_ContainerSpeculation"
      depends="compile_ralph_tests"
      description="Run container speculation.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.ContainerSpeculationTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>


  <!-- Run Range test -->
  <target
      name="run_Range"
      depends="compile_ralph_tests"
      description="Run range test.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.Range"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>        
    </java>
  </target>
  
  <!-- Run ReadReadWriteSpeculation test -->
  <target
      name="run_ReadReadWriteSpeculation"
      depends="compile_ralph_tests"
      description="Run read-read-write speculation.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.ReadReadWriteTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run InterruptedSpeculater test -->
  <target
      name="run_InterruptedSpeculaterTest"
      depends="compile_ralph_tests"
      description="Run a test where the root of speculation gets interrupted.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.InterruptedSpeculaterTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Run InterruptedSpeculater test -->
  <target
      name="run_MiddleInterruptedSpeculaterTest"
      depends="compile_ralph_tests"
      description="Run a test where an object in middle of speculation chain
                   gets interrupted.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.MiddleInterruptedSpeculaterTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Backed speculation test -->
  <target
      name="run_AlwaysWorksBackedSpeculationTest"
      depends="compile_ralph_tests"
      description="Run a test where we try to back a speculative with a
                   backing code.  Commits to hardware always succeed.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.AlwaysWorksBackedSpeculationTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Random delays backed speculation test -->
  <target
      name="run_RandomDelaysAlwaysWorksBackedSpeculationTest"
      depends="compile_ralph_tests"
      description="Run a test where we try to back a speculative with a
                   backing code.  Commits to hardware always succeed, but
                   take random times to commit">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.RandomDelaysAlwaysWorksBackedSpeculationTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>


  <!-- Random failures backed speculation test -->
  <target
      name="run_RandomFailuresBackedSpeculationTest"
      depends="compile_ralph_tests"
      description="Run a test where we try to back a speculative with a
                   backing code.  Commits to hardware randomly fail.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.RandomFailuresBackedSpeculationTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- AtomicFailures test -->
  <target
      name="run_AtomicStructTest"
      depends="compile_ralph_tests"
      description="Ensure that TVar on struct works correctly">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.AtomicStructTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- TextManipulation test -->
  <target
      name="run_TextManipulation"
      depends="compile_ralph_tests"
      description="Test concatenating strings and converting numbers to strings.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.TextManipulation"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- Lots of Backouts test -->
  <target
      name="run_LotsOfBackouts"
      depends="compile_ralph_tests"
      description="Test that always rollback state during backouts.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.LotsOfBackoutsTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- TimedAlwaysWorksBackedSpeculationTest -->
  <target
      name="run_TimedAlwaysWorksBackedSpeculationTest"
      depends="compile_ralph_tests"
      description="Test that speculation actually increases throughput.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.TimedAlwaysWorksBackedSpeculationTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- TimedAlwaysWorksBackedSpeculationTest -->
  <target
      name="run_SimplifiedTimedSpeculationTest"
      depends="compile_ralph_tests"
      description="Test that speculation actually increases
                   throughput on smaller test case than BackedSpeculation.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.SimplifiedTimedSpeculationTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- PartnerCallReturn -->
  <target
      name="run_PartnerCallReturn"
      depends="compile_ralph_tests"
      description="Test that passing a value back to caller works.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.PartnerCallReturn"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  <!-- SerializeListTest -->
  <target
      name="run_SerializeListTest"
      depends="compile_ralph_tests"
      description="Test that can serialize a list.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.SerializeListTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
        <jvmarg value="-ea"/>
    </java>
  </target>

  
  
  <!-- Delete the build directories -->
  <target name="clean" description="get rid of build dir">
    <delete dir="${build.dir}"/>
    <delete dir="${ralph_emitted.dir}"/>
    <!-- Delete ralph compiler output -->
    <delete file="parser.out"/>
    <delete file="parsetab.py"/>
    
  </target>

  <target
      name="clean_all"
      depends="clean"
      description="get rid of build dir and all built libs">
    
    <ant antfile="${lib_build_path}/build.xml" target="clean" />
    
  </target>

  
</project>
