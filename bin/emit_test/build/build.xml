<project name="RalphEmitTest" default="compile" basedir=".">
  
  <description>
    Test cases for java libraries.
  </description>

  <dirname
    property="emit_test_dir"
    file="${ant.file.RalphJavaLibTest}"
  />

  <!-- global properties for this build file -->
  <property name="build.dir" location="${emit_test_dir}/classes"/>
  <property name="ralph_src.dir" location="${emit_test_dir}/../ralph_src"/>
  <property name="ralph_emitted.dir" location="${emit_test_dir}/../ralph_emitted"/>
  <property name="test_src.dir" location="${emit_test_dir}/../test_src"/>
  <property
      name="lib_build_path"
      location="${emit_test_dir}/../../../ralph/java_lib/build"/>
  <property
      name="lib_class_path" location="${lib_build_path}/classes/"/>
  <property
      name="proto_class_path" location="${lib_build_path}/../protobuf-java-2.4.1.jar"/>
  <property name="ralph_compiler_py" location="${emit_test_dir}/../../emit_file.py"/>

  
  <!-- set up build directories for test -->
  <target name="init" description="setup build directories">
    <echo message="Setting up build directories for tests"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${ralph_emitted.dir}"/>
  </target>


  <!-- COMPILING -->
  <!-- compile java libraries -->
  <target name="compile_libs" depends="init" description="compile library files">
    <ant antfile="${lib_build_path}/build.xml" target="compile_all" />  
  </target>

  <target name="translate_ralph" depends="init" description="translate ralph files">
    <!-- Compile to java -->
    <echo message="${line.separator}Emitting basic_ralph.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/basic_ralph.rph"/>
      <arg line="${ralph_emitted.dir}/BasicRalph.java"/>
      <arg line="emit_test_package"/>
      <arg line="BasicRalph"/>
    </exec>

    <echo message="${line.separator}Emitting internal_method_call.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/internal_method_call.rph"/>
      <arg line="${ralph_emitted.dir}/InternalMethodCall.java"/>
      <arg line="emit_test_package"/>
      <arg line="InternalMethodCall"/>
    </exec>

    <echo message="${line.separator}Emitting ralph_atomically.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/ralph_atomically.rph"/>
      <arg line="${ralph_emitted.dir}/RalphAtomically.java"/>
      <arg line="emit_test_package"/>
      <arg line="RalphAtomically"/>
    </exec>
    
    <echo message="${line.separator}Emitting basic_partner.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/basic_partner.rph"/>
      <arg line="${ralph_emitted.dir}/BasicPartner.java"/>
      <arg line="emit_test_package"/>
      <arg line="BasicPartner"/>
    </exec>
    
    <echo message="${line.separator}Emitting test_map.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/test_map.rph"/>
      <arg line="${ralph_emitted.dir}/MapTest.java"/>
      <arg line="emit_test_package"/>
      <arg line="MapTest"/>
    </exec>
    
    <echo message="${line.separator}Emitting atomic_map.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/atomic_map.rph"/>
      <arg line="${ralph_emitted.dir}/AtomicMapTest.java"/>
      <arg line="emit_test_package"/>
      <arg line="AtomicMapTest"/>
    </exec>
    
    <echo message="${line.separator}Emitting struct_test.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/struct_test.rph"/>
      <arg line="${ralph_emitted.dir}/StructTest.java"/>
      <arg line="emit_test_package"/>
      <arg line="StructTest"/>
    </exec>

    <echo message="${line.separator}Emitting nested_structs.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/nested_structs.rph"/>
      <arg line="${ralph_emitted.dir}/NestedStructTest.java"/>
      <arg line="emit_test_package"/>
      <arg line="NestedStructTest"/>
    </exec>

    <echo message="${line.separator}Emitting test_list.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/test_list.rph"/>
      <arg line="${ralph_emitted.dir}/ListTest.java"/>
      <arg line="emit_test_package"/>
      <arg line="ListTest"/>
    </exec>

    <echo message="${line.separator}Emitting atomic_list.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/atomic_list.rph"/>
      <arg line="${ralph_emitted.dir}/AtomicListTest.java"/>
      <arg line="emit_test_package"/>
      <arg line="AtomicListTest"/>
    </exec>

    <echo message="${line.separator}Emitting for_list.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/for_list.rph"/>
      <arg line="${ralph_emitted.dir}/ForListTest.java"/>
      <arg line="emit_test_package"/>
      <arg line="ForListTest"/>
    </exec>

    <echo message="${line.separator}Emitting for_map.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/for_map.rph"/>
      <arg line="${ralph_emitted.dir}/ForMapTest.java"/>
      <arg line="emit_test_package"/>
      <arg line="ForMapTest"/>
    </exec>

    <echo message="${line.separator}Emitting struct_lib.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/struct_lib.rph"/>
      <arg line="${ralph_emitted.dir}/StructLib.java"/>
      <arg line="emit_test_package"/>
      <arg line="StructLib"/>
    </exec>

    <echo message="${line.separator}Emitting struct_lib_user.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/struct_lib_user.rph"/>
      <arg line="${ralph_emitted.dir}/StructLibUser.java"/>
      <arg line="emit_test_package"/>
      <arg line="StructLibUser"/>
    </exec>

    <echo message="${line.separator}Emitting interrupted_atomically.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/interrupted_atomically.rph"/>
      <arg line="${ralph_emitted.dir}/InterruptedAtomically.java"/>
      <arg line="emit_test_package"/>
      <arg line="InterruptedAtomically"/>
    </exec>

    <echo message="${line.separator}Emitting endpoint_lib_user.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/endpoint_lib_user.rph"/>
      <arg line="${ralph_emitted.dir}/EndpointLibUser.java"/>
      <arg line="emit_test_package"/>
      <arg line="EndpointLibUser"/>
    </exec>

    <echo message="${line.separator}Emitting interrupted_endpoint_atomically.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/interrupted_endpoint_atomically.rph"/>
      <arg line="${ralph_emitted.dir}/InterruptedEndpointAtomically.java"/>
      <arg line="emit_test_package"/>
      <arg line="InterruptedEndpointAtomically"/>
    </exec>

    <echo message="${line.separator}Emitting promotion.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/promotion.rph"/>
      <arg line="${ralph_emitted.dir}/Promotion.java"/>
      <arg line="emit_test_package"/>
      <arg line="Promotion"/>
    </exec>

    <echo message="${line.separator}Emitting super_interrupted_atomically.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/super_interrupted_atomically.rph"/>
      <arg line="${ralph_emitted.dir}/SuperInterruptedAtomically.java"/>
      <arg line="emit_test_package"/>
      <arg line="SuperInterruptedAtomically"/>
    </exec>

    <echo message="${line.separator}Emitting hardware_failure.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/hardware_failure.rph"/>
      <arg line="${ralph_emitted.dir}/HardwareFailure.java"/>
      <arg line="emit_test_package"/>
      <arg line="HardwareFailure"/>
    </exec>

    <echo message="${line.separator}Emitting return_list.rph${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="${ralph_src.dir}/return_list.rph"/>
      <arg line="${ralph_emitted.dir}/ReturnList.java"/>
      <arg line="emit_test_package"/>
      <arg line="ReturnList"/>
    </exec>
    
  </target>

  
  <target name="ralph_to_byte_code" depends="init,compile_libs" description="compile ralph files">
    <!-- Compile all ralph java to bytecode -->
    <javac
        srcdir="${ralph_emitted.dir}"
        destdir="${build.dir}"
        classpath="${lib_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false" />
  </target>

    
  <!-- compile ralph endpoints to java programs, including translating -->
  <target
      name="compile_ralph"
      depends="init,compile_libs,translate_ralph,ralph_to_byte_code"
      description="compile ralph files">
  </target>

  <target
      name="compile_ralph_tests"
      depends="init,compile_ralph"
      description="compile basic ralph">
    <!-- compile all ralph tests  -->
    <javac
        srcdir="${test_src.dir}"
        destdir="${build.dir}"
        classpath="${build.dir}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false" />
  </target>

  <!-- RUNNING TESTS -->
  <target
      name="run_all"
      depends=
        "run_BasicSetterGetter, run_BasicInternalMethodCall,
         run_BasicTestAtomically,run_BasicPartnerCall,run_MapTest,
         run_AtomicMapTest,run_StructSetterGetter,run_NestedStructTest,
         run_ListTest,run_AtomicListTest,run_ForListTest,run_ForMapTest,
         run_StructLibraries,run_InterruptedAtomically,run_EndpointCalls,
         run_InterruptedEndpointCallAtomically,run_PromotionTest,
         run_SuperInterruptedAtomically,run_HardwareFailure,run_ReturnList">
  </target>

  
  <!-- Single side setter getter -->
  <target
      name="run_BasicSetterGetter"
      depends="compile_ralph_tests"
      description="Single side setter getter test.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.BasicSetterGetter" fork="yes">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- Struct setter getter -->
  <target
      name="run_StructSetterGetter"
      depends="compile_ralph_tests"
      description="Setters and getters on struct fields test.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.StructSetterGetter" fork="yes">
        <arg line="${args}"/>
    </java>
  </target>
  
  <!-- Internal method call on single host -->
  <target
      name="run_BasicInternalMethodCall"
      depends="compile_ralph_tests"
      description="Single side internal method call.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.BasicInternalMethodCall" fork="yes">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- Atomically change -->
  <target
      name="run_BasicTestAtomically"
      depends="compile_ralph_tests"
      description="Test nested atomically-s.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.BasicTestAtomically" fork="yes">
        <arg line="${args}"/>
    </java>
  </target>
  

  <!-- Partner call -->
  <target
      name="run_BasicPartnerCall"
      depends="compile_ralph_tests"
      description="Test calling partner methods.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.BasicPartnerCall"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>
  

  <!-- MapTesting -->
  <target
      name="run_MapTest"
      depends="compile_ralph_tests"
      description="Test map methods.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.MapTester"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>
  
  <!-- Atomic map test -->
  <target
      name="run_AtomicMapTest"
      depends="compile_ralph_tests"
      description="Test atomic map methods.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.AtomicMapTester"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- ListTesting -->
  <target
      name="run_ListTest"
      depends="compile_ralph_tests"
      description="Test list methods.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.ListTester"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- AtomicListTesting -->
  <target
      name="run_AtomicListTest"
      depends="compile_ralph_tests"
      description="Test atomic list methods.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.AtomicListTester"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- Nested struct test -->
  <target
      name="run_NestedStructTest"
      depends="compile_ralph_tests"
      description="Test nested struct.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.NestedStructs"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- For list test -->
  <target
      name="run_ForListTest"
      depends="compile_ralph_tests"
      description="Test for loop on lists.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.ForList"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- For map test -->
  <target
      name="run_ForMapTest"
      depends="compile_ralph_tests"
      description="Test for loop on maps.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.ForMap"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- Struct libraries -->
  <target
      name="run_StructLibraries"
      depends="compile_ralph_tests"
      description="Tests that can import a struct from another library.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.StructLibraries"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>


  <!-- Run interrupted atomically -->
  <target
      name="run_InterruptedAtomically"
      depends="compile_ralph_tests"
      description="Tests that handles atomic events' being interrupted.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.InterruptedTestAtomically"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>

  
  <!-- Run endpoint calls -->
  <target
      name="run_EndpointCalls"
      depends="compile_ralph_tests"  
      description="Tests issue endpoint calls from within ralph.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.EndpointCalls"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>
  
  <!-- Run interrupted endpoint calls -->
  <target
      name="run_InterruptedEndpointCallAtomically"
      depends="compile_ralph_tests"  
      description="Tests ensure atomically wrapper between endpoint calls works.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.InterruptedEndpointCallAtomically"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- Run promotion test -->
  <target
      name="run_PromotionTest"
      depends="compile_ralph_tests"
      description="Tests quality of service through promotions.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.PromotionTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- Run super event priority test -->
  <target
      name="run_SuperInterruptedAtomically"
      depends="compile_ralph_tests"
      description="Tests that can run with super priority.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.SuperInterruptedTestAtomically"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- Run hardware failure test -->
  <target
      name="run_HardwareFailure"
      depends="compile_ralph_tests"
      description="Tests that system can handle hardware failures.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.HardwareFailureTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- Run return list -->
  <target
      name="run_ReturnList"
      depends="compile_ralph_tests"
      description="Tests that can return a list.">
    <java
        dir="${build.dir}"
        classname="emit_test_harnesses.ReturnListTest"
        fork="yes"
        classpath="${build.dir}:${proto_class_path}">
        <arg line="${args}"/>
    </java>
  </target>

  <!-- Delete the build directories -->
  <target name="clean" description="get rid of build dir">
    <delete dir="${build.dir}"/>
    <delete dir="${ralph_emitted.dir}"/>
  </target>

  <target
      name="clean_all"
      depends="clean"
      description="get rid of build dir and all built libs">
    
    <ant antfile="${lib_build_path}/build.xml" target="clean" />
    
  </target>

  
</project>
