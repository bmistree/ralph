<project name="RalphEmitTest" default="compile" basedir=".">
  
  <description>
    Test cases for java libraries.
  </description>

  <dirname
    property="emit_test_dir"
    file="${ant.file.RalphJavaLibTest}"
  />
    
  <!-- global properties for this build file -->
  <property name="build.dir" location="${emit_test_dir}/classes"/>
  <property name="ralph_src.dir" location="${emit_test_dir}/../ralph_src"/>
  <property name="ralph_emitted.dir" location="${emit_test_dir}/../ralph_emitted"/>
  <property name="test_src.dir" location="${emit_test_dir}/../emit_test_harnesses"/>
  <property
      name="lib_build_path"
      location="${emit_test_dir}/../../../ralph/java_lib/build"/>
  <property
      name="lib_class_path" location="${lib_build_path}/classes/"/>
  <property
      name="proto_class_path" location="${lib_build_path}/../protobuf-java-2.4.1.jar"/>
  <property name="ralph_compiler_py" location="${emit_test_dir}/../../emit_file.py"/>

  <property name="emitted_package" value="ralph_emitted"/>
  
  <!-- set up build directories for test -->
  <target name="init" description="setup build directories">
    <echo message="Setting up build directories for tests"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${ralph_emitted.dir}"/>
  </target>


  <!-- Compile an individual rph file -->
  <target
      name="compile_ralph"
      description="Compile ralph">
    <echo message="${line.separator}${rph_filename}${line.separator}"/>
    <exec executable="python" failonerror="true">
      <arg line="${ralph_compiler_py}"/>
      <arg line="-i ${ralph_src.dir}/${rph_filename}"/>
      <arg line="-o ${ralph_emitted.dir}/${class_name}.java"/>
      <arg line="-p ${emitted_package}"/>
      <arg line="-c ${class_name}"/>
    </exec>
  </target>

  <!-- Compilation for each ralph file -->
  <target name="iface_basic_ralph" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="iface_basic_ralph.rph"/>
      <param name="class_name" value="IFaceBasicRalphJava"/>
    </antcall>
  </target>

  <target name="multiple_interfaces" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="multiple_interfaces.rph"/>
      <param name="class_name" value="MultipleInterfacesJava"/>
    </antcall>
  </target>

  <target name="serialize_struct_with_list" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_struct_with_list.rph"/>
      <param name="class_name" value="SerializeStructWithListJava"/>
    </antcall>
  </target>
  
  <target name="serialize_struct_with_map" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_struct_with_map.rph"/>
      <param name="class_name" value="SerializeStructWithMapJava"/>
    </antcall>
  </target>

  <target name="serialize_map_of_structs" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_map_of_structs.rph"/>
      <param name="class_name" value="SerializeMapOfStructsJava"/>
    </antcall>
  </target>
    
  <target name="struct_serialization" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="struct_serialization.rph"/>
      <param name="class_name" value="StructSerializationJava"/>
    </antcall>
  </target>

  <target name="less_simplified_backed_speculation" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="less_simplified_backed_speculation.rph"/>
      <param name="class_name" value="LessSimplifiedBackedSpeculationJava"/>
    </antcall>
  </target>

  <target name="serialize_num_map" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_num_map.rph"/>
      <param name="class_name" value="SerializeNumMapJava"/>
    </antcall>
  </target>

  <target name="struct_list_serialization" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="struct_list_serialization.rph"/>
      <param name="class_name" value="StructListSerializationJava"/>
    </antcall>
  </target>

  <target name="serialize_text_list" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_text_list.rph"/>
      <param name="class_name" value="SerializeTextListJava"/>
    </antcall>
  </target>

  <target name="serialize_true_false_list" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_true_false_list.rph"/>
      <param name="class_name" value="SerializeTrueFalseListJava"/>
    </antcall>
  </target>

  <target name="basic_ralph" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="basic_ralph.rph"/>
      <param name="class_name" value="BasicRalphJava"/>
    </antcall>
  </target>

  <target name="internal_method_call" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="internal_method_call.rph"/>
      <param name="class_name" value="InternalMethodCallJava"/>
    </antcall>
  </target>

  <target name="ralph_atomically" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="ralph_atomically.rph"/>
      <param name="class_name" value="RalphAtomicallyJava"/>
    </antcall>
  </target>

  <target name="basic_partner" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="basic_partner.rph"/>
      <param name="class_name" value="BasicPartnerJava"/>
    </antcall>
  </target>

  <target name="test_map" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="test_map.rph"/>
      <param name="class_name" value="TestMapJava"/>
    </antcall>
  </target>

  <target name="atomic_map" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="atomic_map.rph"/>
      <param name="class_name" value="AtomicMapJava"/>
    </antcall>
  </target>

  <target name="struct_test" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="struct_test.rph"/>
      <param name="class_name" value="StructTestJava"/>
    </antcall>
  </target>

  <target name="nested_structs" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="nested_structs.rph"/>
      <param name="class_name" value="NestedStructsJava"/>
    </antcall>
  </target>

  <target name="test_list" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="test_list.rph"/>
      <param name="class_name" value="TestListJava"/>
    </antcall>
  </target>
  

  <target name="atomic_list" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="atomic_list.rph"/>
      <param name="class_name" value="AtomicListJava"/>
    </antcall>
  </target>
  

  <target name="for_list" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="for_list.rph"/>
      <param name="class_name" value="ForListJava"/>
    </antcall>
  </target>

  <target name="for_map" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="for_map.rph"/>
      <param name="class_name" value="ForMapJava"/>
    </antcall>
  </target>

  <target name="struct_lib" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="struct_lib.rph"/>
      <param name="class_name" value="StructLibJava"/>
    </antcall>
  </target>

  <target name="struct_lib_user" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="struct_lib_user.rph"/>
      <param name="class_name" value="StructLibUserJava"/>
    </antcall>
  </target>

  <target name="interrupted_atomically" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="interrupted_atomically.rph"/>
      <param name="class_name" value="InterruptedAtomicallyJava"/>
    </antcall>
  </target>

  <target name="endpoint_lib_user" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="endpoint_lib_user.rph"/>
      <param name="class_name" value="EndpointLibUserJava"/>
    </antcall>
  </target>

  <target name="interrupted_endpoint_atomically" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="interrupted_endpoint_atomically.rph"/>
      <param name="class_name" value="InterruptedEndpointAtomicallyJava"/>
    </antcall>
  </target>

  <target name="promotion" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="promotion.rph"/>
      <param name="class_name" value="PromotionJava"/>
    </antcall>
  </target>

  <target name="promotion" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="super_interrupted_atomically.rph"/>
      <param name="class_name" value="SuperInterruptedAtomicallyJava"/>
    </antcall>
  </target>

  <target name="hardware_failure" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="hardware_failure.rph"/>
      <param name="class_name" value="HardwareFailureJava"/>
    </antcall>
  </target>

  <target name="return_list" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="return_list.rph"/>
      <param name="class_name" value="ReturnListJava"/>
    </antcall>
  </target>

  <target name="atomic_partner" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="atomic_partner.rph"/>
      <param name="class_name" value="AtomicPartnerJava"/>
    </antcall>
  </target>

  <target name="many_ops_atomic_list_fail" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="many_ops_atomic_list_fail.rph"/>
      <param name="class_name" value="ManyOpsAtomicListFailJava"/>
    </antcall>
  </target>

  <target name="atomic_list_append" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="atomic_list_append.rph"/>
      <param name="class_name" value="AtomicListAppendJava"/>
    </antcall>
  </target>

  <target name="endpoint_struct_list" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="endpoint_struct_list.rph"/>
      <param name="class_name" value="EndpointStructListJava"/>
    </antcall>
  </target>

  <target name="wrapped_partner" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="wrapped_partner.rph"/>
      <param name="class_name" value="WrappedPartnerJava"/>
    </antcall>
  </target>

  <target name="linked_instance" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="linked_instance.rph"/>
      <param name="class_name" value="LinkedInstanceJava"/>
    </antcall>
  </target>
  
  <target name="linked_connection" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="linked_connection.rph"/>
      <param name="class_name" value="LinkedConnectionJava"/>
    </antcall>
  </target>
    
  <target name="single_side_service_factory" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="single_side_service_factory.rph"/>
      <param name="class_name" value="SingleSideServiceFactoryJava"/>
    </antcall>
  </target>

  <target name="partner_service_factory" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="partner_service_factory.rph"/>
      <param name="class_name" value="PartnerServiceFactoryJava"/>
    </antcall>
  </target>

  <target name="basic_speculation" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="basic_speculation.rph"/>
      <param name="class_name" value="BasicSpeculationJava"/>
    </antcall>
  </target>

  <target name="null" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="null.rph"/>
      <param name="class_name" value="NullJava"/>
    </antcall>
  </target>

  <target name="internal_create_service" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="internal_create_service.rph"/>
      <param name="class_name" value="InternalCreateServiceJava"/>
    </antcall>
  </target>
  
  <target name="self" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="self.rph"/>
      <param name="class_name" value="SelfJava"/>
    </antcall>
  </target>

  <target name="wrapped_iface" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="wrapped_iface.rph"/>
      <param name="class_name" value="WrappedIFaceJava"/>
    </antcall>
  </target>

  <target name="container_speculation" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="container_speculation.rph"/>
      <param name="class_name" value="ContainerSpeculationJava"/>
    </antcall>
  </target>

  <target name="range_test" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="range_test.rph"/>
      <param name="class_name" value="RangeTestJava"/>
    </antcall>
  </target>
  
  <target name="read_read_write_speculation" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="read_read_write_speculation.rph"/>
      <param name="class_name" value="ReadReadWriteSpeculationJava"/>
    </antcall>
  </target>

  <target name="interrupted_speculater" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="interrupted_speculater.rph"/>
      <param name="class_name" value="InterruptedSpeculaterJava"/>
    </antcall>
  </target>

  <target name="middle_interrupted_speculater" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="middle_interrupted_speculater.rph"/>
      <param name="class_name" value="MiddleInterruptedSpeculaterJava"/>
    </antcall>
  </target>

  <target name="backed_speculation" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="backed_speculation.rph"/>
      <param name="class_name" value="BackedSpeculationJava"/>
    </antcall>
  </target>

  <target name="atomic_struct.rph" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="atomic_struct.rph"/>
      <param name="class_name" value="AtomicStructJava"/>
    </antcall>
  </target>

  <target name="text_add_and_to_text" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="text_add_and_to_text.rph"/>
      <param name="class_name" value="TextAddAndToTextJava"/>
    </antcall>
  </target>

  <target name="lots_of_backouts" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="lots_of_backouts.rph"/>
      <param name="class_name" value="LotsOfBackoutsJava"/>
    </antcall>
  </target>
  
  <target name="multiline_string" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="multiline_string.rph"/>
      <param name="class_name" value="MultiLineStringJava"/>
    </antcall>
  </target>

  <target name="simplified_backed_speculation" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="simplified_backed_speculation.rph"/>
      <param name="class_name" value="SimplifiedBackedSpeculationJava"/>
    </antcall>
  </target>
  
  <target name="serialize_number_list" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="serialize_number_list.rph"/>
      <param name="class_name" value="SerializeNumberListJava"/>
    </antcall>
  </target>
  
  <target name="partner_number_return" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="partner_number_return.rph"/>
      <param name="class_name" value="PartnerNumberReturnJava"/>
    </antcall>
  </target>
  
  <target name="internal_return_struct" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="internal_return_struct.rph"/>
      <param name="class_name" value="InternalReturnStructJava"/>
    </antcall>
  </target>
  
  <target name="reference_service_factory" depends="init" description="translate ralph files">
    <antcall target="compile_ralph">
      <param name="rph_filename" value="reference_service_factory.rph"/>
      <param name="class_name" value="ReferenceServiceFactoryJava"/>
    </antcall>
  </target>

  <!-- COMPILING -->
  <!-- compile java libraries -->
  <target name="compile_libs" depends="init" description="compile library files">
    <ant antfile="${lib_build_path}/build.xml" target="compile_all" />  
  </target>

  
  <target name="ralph_to_byte_code" depends="init,compile_libs" description="compile ralph files">
    <!-- Compile all ralph java to bytecode -->
    <javac
        srcdir="${ralph_emitted.dir}"
        destdir="${build.dir}"
        classpath="${lib_class_path}:${proto_class_path}"
        debug="true"
        debuglevel="lines,vars,source"
        includeantruntime="false" />
  </target>


  <!-- RUNNING TESTS -->
  <target
      name="run_all"
      depends=
        "run_BasicSetterGetter, run_BasicInternalMethodCall,
         run_BasicTestAtomically,run_BasicPartnerCall,run_MapTest,
         run_AtomicMapTest,run_StructSetterGetter,run_NestedStructTest,
         run_ListTest,run_AtomicListTest,run_ForListTest,run_ForMapTest,
         run_StructLibraries,run_InterruptedAtomically,run_EndpointCalls,
         run_InterruptedEndpointCallAtomically,run_PromotionTest,
         run_SuperInterruptedAtomically,run_HardwareFailure,run_ReturnList,
         run_WoundWait,run_TCPPartnerCall,run_AtomicPartnerCall,
         run_AtomicTCPPartnerCall,run_RandomFailureExtendedList,
         run_WrappedPartnerTCPCall,run_LinkedTests,run_SingleSideServiceFactory,
         run_PartnerServiceFactory,run_EndpointStructListTest,run_BasicSpeculation,
         run_NullTest,run_InternalCreateService,run_Self,run_ContainerSpeculation,
         run_Range,run_ReadReadWriteSpeculation,run_InterruptedSpeculaterTest,
         run_MiddleInterruptedSpeculaterTest,run_AlwaysWorksBackedSpeculationTest,
         run_RandomDelaysAlwaysWorksBackedSpeculationTest,
         run_RandomFailuresBackedSpeculationTest, run_AtomicStructTest,
         run_TextManipulation,run_LotsOfBackouts,
         run_TimedAlwaysWorksBackedSpeculationTest,
         run_SimplifiedTimedSpeculationTest, run_PartnerCallReturn,
         run_SerializeNumberListTest,run_SerializeTextListTest,
         run_SerializeTrueFalseListTest,run_SerializeStructTest,
         run_ListOfStructsSerializationTest,run_LessSimplifiedTimedBackedSpeculation,
         run_SerializeNumberNumberMapTest,run_SerializeMapOfStructs,
         run_InternalStructMethodCallTest,run_ReferenceServiceFactoryTest,
         run_MultipleInterfacesTest,run_SerializeStructWithMap,
         run_SerializeStructWithList">
  </target>
    

  <!-- Instructions for building ralph for each test   -->
  <!-- Single side setter getter -->
  <target
      name="ralph_BasicSetterGetter"
      depends="iface_basic_ralph,basic_ralph">
  </target>

  <target
      name="ralph_StructSetterGetter"
      depends="iface_basic_ralph,struct_test">
  </target>

  <target
      name="ralph_BasicInternalMethodCall"
      depends="internal_method_call">
  </target>

  <target
      name="ralph_BasicTestAtomically"
      depends="ralph_atomically">
  </target>

  <target
      name="ralph_BasicPartnerCall"
      depends="basic_partner">
  </target>

  <target
      name="ralph_TCPPartnerCall"
      depends="basic_partner">
  </target>

  <target
      name="ralph_MapTest"
      depends="test_map">
  </target>

  <target
      name="ralph_AtomicMapTest"
      depends="atomic_map_test">
  </target>

  <target
      name="ralph_ListTest"
      depends="test_list">
  </target>

  <target
      name="ralph_AtomicListTest"
      depends="atomic_list_test">
  </target>

  <target
      name="ralph_NestedStructs"
      depends="nested_structs">
  </target>

  <target
      name="ralph_ForListTest"
      depends="for_list">
  </target>

  <target
      name="ralph_ForMapTest"
      depends="for_map">
  </target>

  <target
      name="ralph_StructLibraries"
      depends="struct_lib_user">
  </target>
  
  <target
      name="ralph_InterruptedAtomically"
      depends="interrupted_atomically">
  </target>

  <target
      name="ralph_EndpointCalls"
      depends="basic_ralph,endpoint_lib_user">
  </target>

  <target
      name="ralph_InterruptedEndpointCallAtomically"
      depends="basic_ralph,interrupted_endpoint_atomically">
  </target>

  <target
      name="ralph_PromotionTest"
      depends="promotion">
  </target>

  <target
      name="ralph_SuperInterruptedAtomically"
      depends="super_interrupted_atomically">
  </target>

  <target
      name="ralph_HardwareFailure"
      depends="hardware_failure">
  </target>

  <target
      name="ralph_ReturnList"
      depends="return_list">
  </target>

  <target
      name="ralph_WoundWait"
      depends="promotion">
  </target>

  <target
      name="ralph_WoundWait"
      depends="promotion">
  </target>

  <target
      name="ralph_AtomicPartnerCall"
      depends="atomic_partner">
  </target>

  <target
      name="ralph_AtomicTCPPartnerCall"
      depends="atomic_partner">
  </target>

  <target
      name="ralph_AtomicTCPPartnerCall"
      depends="atomic_partner">
  </target>

  <target
      name="ralph_RandomFailureExtendedList"
      depends="many_ops_atomic_list_fail">
  </target>

  <target
      name="ralph_AtomicListAppend"
      depends="atomic_list_append">
  </target>

  <target
      name="ralph_WrappedPartnerTCPCall"
      depends="basic_partner,wrapped_partner">
  </target>

  <target
      name="ralph_LinkedTests"
      depends="linked_connection,linked_instance">
  </target>

  <target
      name="ralph_SingleSideServiceFactory"
      depends="basic_ralph,single_side_service_factory">
  </target>

  <target
      name="ralph_PartnerServiceFactory"
      depends="basic_ralph,single_side_service_factory">
  </target>

  <target
      name="ralph_EndpointStructList"
      depends="basic_ralph,endpoint_struct_list">
  </target>
  
  <target
      name="ralph_BasicSpeculation"
      depends="basic_speculation">
  </target>
  
  <target
      name="ralph_NullTest"
      depends="null">
  </target>
  
  <target
      name="ralph_InternalCreateService"
      depends="internal_create_service">
  </target>

  <target
      name="ralph_Self"
      depends="self">
  </target>

  <target
      name="ralph_ContainerSpeculation"
      depends="basic_speculation,container_speculation">
  </target>

  <target
      name="ralph_Range"
      depends="range_test">
  </target>
  
  <target
      name="ralph_ReadReadWriteSpeculation"
      depends="read_read_write_speculation">
  </target>

  <target
      name="ralph_InterruptedSpeculaterTest"
      depends="interrupted_speculater">
  </target>

  <target
      name="ralph_MiddleInterruptedSpeculaterTest"
      depends="middle_interrupted_speculater">
  </target>

  <target
      name="ralph_AlwaysWorksBackedSpeculationTest"
      depends="backed_speculation">
  </target>

  <target
      name="ralph_RandomDelaysAlwaysWorksBackedSpeculationTest"
      depends="backed_speculation">
  </target>

  <target
      name="ralph_RandomFailuresBackedSpeculationTest"
      depends="backed_speculation">
  </target>

  <target
      name="ralph_AtomicStructTest"
      depends="atomic_struct">
  </target>

  <target
      name="ralph_TextManipulation"
      depends="text_add_and_to_text">
  </target>

  <target
      name="ralph_LotsOfBackouts"
      depends="lots_of_backouts">
  </target>

  <target
      name="ralph_TimedAlwaysWorksBackedSpeculationTest"
      depends="backed_speculation">
  </target>

  <target
      name="ralph_SimplifiedTimedSpeculationTest"
      depends="simplified_backed_speculation">
  </target>

  <target
      name="ralph_PartnerCallReturn"
      depends="partner_number_return">
  </target>

  <target
      name="ralph_SerializeNumberList"
      depends="serialize_number_list">
  </target>

  <target
      name="ralph_SerializeTextList"
      depends="serialize_text_list">
  </target>

  <target
      name="ralph_SerializeTrueFalseList"
      depends="serialize_true_false_list">
  </target>
  
  <target
      name="ralph_SerializeStructTest"
      depends="struct_serialization">
  </target>
  
  <target
      name="ralph_ListOfStructsSerializationTest"
      depends="struct_list_serialization">
  </target>
  
  <target
      name="ralph_LessSimplifiedTimedBackedSpeculation"
      depends="less_simplified_backed_speculation">
  </target>
  
  <target
      name="ralph_SerializeNumberNumberMapTest"
      depends="serialize_num_map">
  </target>

  <target
      name="ralph_SerializeMapOfStructs"
      depends="serialize_map_of_structs">
  </target>

  <target
      name="ralph_InternalStructMethodCallTest"
      depends="internal_return_struct">
  </target>

  <target
      name="ralph_ReferenceServiceFactoryTest"
      depends="reference_service_factory">
  </target>

  <target
      name="ralph_MultipleInterfacesTest"
      depends="multiple_interfaces">
  </target>

  <target
      name="ralph_SerializeStructWithMap"
      depends="serialize_struct_with_map">
  </target>

  <target
      name="ralph_SerializeStructWithList"
      depends="serialize_struct_with_list">
  </target>


  
  <!-- Delete the build directories -->
  <target name="clean" description="get rid of build dir">
    <delete dir="${build.dir}"/>
    <delete dir="${ralph_emitted.dir}"/>
    <!-- Delete ralph compiler output -->
    <delete file="parser.out"/>
    <delete file="parsetab.py"/>
    
  </target>

  <target
      name="clean_all"
      depends="clean"
      description="get rid of build dir and all built libs">
    
    <ant antfile="${lib_build_path}/build.xml" target="clean" />
    
  </target>
</project>
