alias Endpoint ListSerializer as 'SerializeTrueFalseListJava.ListSerializer';
alias Endpoint RemoteInstaller as 'RemoteInstallerJava.RemoteInstaller';

Endpoint ListSerializer
{
    Remote ListSerializer remote_endpt = null;

    /**
       {@code factory} should be factory for ListSerializer
     */
    install_partner(ServiceFactory factory)
    {
        ServiceReference service_reference = null;
        Service RemoteInstaller remote_installer;
        service_reference = remote_installer.install_remote_service_factory(factory);
        remote_endpt =
            factory.construct_remote_from_reference(service_reference);
    }

    /** NonAtomic tf lists */
    merge_true_falses(TrueFalse a, TrueFalse b, TrueFalse c, TrueFalse d)
        returns Text
    {
        List(element: TrueFalse) list_to_merge;
        list_to_merge.append(a);
        list_to_merge.append(b);
        list_to_merge.append(c);
        list_to_merge.append(d);
        Text concatenated;
        concatenated =
            remote_endpt.partner_merge_tfs_in_list(list_to_merge);
        return concatenated;
    }

    // called only by partner
    partner_merge_tfs_in_list(List(element:TrueFalse) to_merge)
        returns Text
    {
        Text to_return = '';
        for (TrueFalse tf in to_merge)
        {
            if (tf)
                to_return = to_return + "1";
            else
                to_return = to_return + "0";
        }
        return to_return;
    }

    /** NonAtomic tf lists */
    atom_merge_true_falses(TrueFalse a, TrueFalse b, TrueFalse c, TrueFalse d)
        returns Text
    {
        TVar List(element: TrueFalse) list_to_merge;
        list_to_merge.append(a);
        list_to_merge.append(b);
        list_to_merge.append(c);
        list_to_merge.append(d);
        Text concatenated;
        concatenated =
            remote_endpt.atom_partner_merge_tfs_in_list(list_to_merge);
        return concatenated;
    }

    // called only by partner
    atom_partner_merge_tfs_in_list(TVar List(element:TrueFalse) to_merge)
        returns Text
    {
        Text to_return = '';
        for (TrueFalse tf in to_merge)
        {
            if (tf)
                to_return = to_return + "1";
            else
                to_return = to_return + "0";
        }
        return to_return;
    }
}
