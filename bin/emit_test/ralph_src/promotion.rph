alias Endpoint PromoterEndpoint as 'PromotionJava.PromoterEndpoint';

/**
   Want to ensure that get quality of service amongst endpoints.  Way to test
   this is to create two, connected LongAndWrite endpoints, A and B.  Issue a
   bunch of call_from_external calls on A (with arg true).  Before these
   complete, issue a bunch of call_from_external calls on B (with arg false).

   This means that we'll cause a bunch on both A and B.

   Put results of each call into a threadsafe array.  After all events are run,
   look through the array.  If promotion is set up correctly, then should get a
   1 in array, then a -1 in array, then 1, etc.
 */
Endpoint PromoterEndpoint
{
    TVar Number my_number = 0;
    Endpoint PromoterEndpoint promoter_endpt = null;

    call_from_partner()
    {
        // forces a write lock on my_number
        my_number = 1;
    }

    set_promoter(Endpoint PromoterEndpoint promoter_endpt_)
    {
        promoter_endpt = promoter_endpt_;
    }

    call_from_external(TrueFalse positive) returns Number
    {
        Number to_return = -1;
        if (positive)
            to_return = 1;
        atomically
        {
            promoter_endpt.call_from_partner();
            // force a write lock on my_number
            my_number = 1;
            verbatim('try{Thread.sleep(150);}catch(InterruptedException _ex){}');
        }
        return to_return;
    }
}
