alias Interface ISerializeStructSum as 'ISerializeStructSumJava.ISerializeStructSum';
alias Endpoint RemoteInstaller as 'RemoteInstallerJava.RemoteInstaller';
alias Endpoint StructSerializer as 'SerializeStructWithStructJava.StructSerializer';

Struct InnerStruct
{
    Map (from: Text, to: Number) inner_map;
}

Struct OuterStruct
{
    Struct InnerStruct inner_struct;
}


Service StructSerializer implements Interface ISerializeStructSum
{
    Remote StructSerializer remote_endpt = null;

    /**
       {@code factory} should be factory for ListSerializer
     */
    install_partner(ServiceFactory factory)
    {
        ServiceReference service_reference = null;
        Service RemoteInstaller remote_installer;
        service_reference = remote_installer.install_remote_service_factory(factory);
        remote_endpt =
            factory.construct_remote_from_reference(service_reference);
    }


    //@Override
    sum_numbers(
        Number a, Number b, Number c, Number d) returns Number
    {
        Struct OuterStruct to_pass;
        to_pass.inner_struct.inner_map.set('a',a);
        to_pass.inner_struct.inner_map.set('b',b);
        to_pass.inner_struct.inner_map.set('c',c);
        to_pass.inner_struct.inner_map.set('d',d);

        Number to_return;
        to_return = remote_endpt.partner_sum(to_pass);
        return to_return;
    }


    partner_sum(Struct OuterStruct to_sum) returns Number
    {
        Number to_return = 0;
        for (Text key in to_sum.inner_struct.inner_map)
        {
            Number value = to_sum.inner_struct.inner_map.get(key);
            to_return += value;
        }
        return to_return;
    }
}
